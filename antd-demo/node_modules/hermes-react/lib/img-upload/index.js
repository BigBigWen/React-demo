'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _upload = require('antd/lib/upload');

var _upload2 = _interopRequireDefault(_upload);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

require('antd/lib/upload/style/css');

require('antd/lib/icon/style/css');

require('antd/lib/message/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ImgUpload = (_temp = _class = function (_Component) {
  _inherits(ImgUpload, _Component);

  function ImgUpload(props) {
    _classCallCheck(this, ImgUpload);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.getSizeErrorMsg = function (size) {
      if (size < 1024) {
        return '\u56FE\u7247\u5DF2\u8D85\u8FC7' + size + 'KB';
      } else if (size < 1024 * 1024) {
        var sizemb = parseInt(size / 1024, 10);
        return '\u56FE\u7247\u5DF2\u8D85\u8FC7' + sizemb + 'MB';
      } else if (size < 1024 * 1024 * 1024) {
        var sizegb = parseInt(size / 1024 / 1024, 10);
        return '\u56FE\u7247\u5DF2\u8D85\u8FC7' + sizegb + 'GB';
      }
      return '图片超过限制';
    };

    _this.beforeUpload = function (file) {
      var _this$props = _this.props,
          fileExt = _this$props.fileExt,
          maxSize = _this$props.maxSize;

      if (fileExt.indexOf(file.type) < 0) {
        _message3["default"].error('图片格式错误');
        return false;
      }

      // 单个文件限制大小
      if (file.size > maxSize * 1024) {
        _message3["default"].error(_this.getSizeErrorMsg(maxSize));
        return false;
      }
      return true;
    };

    _this.normalizeUploadValue = function (info) {
      if (Array.isArray(info)) {
        return info;
      }
      if (!info) {
        return [];
      }

      var max = _this.props.max;

      var fileList = info.fileList;
      fileList = fileList.slice(fileList.length >= max ? -max : 0);

      // 2. 读取远程路径并显示链接
      fileList = fileList.map(function (file) {
        if (typeof file.response === 'string') {
          file.response = JSON.parse(file.response);
        }
        if (file.response) {
          // 组件会将 file.url 作为链接进行展示,只有图片使用。
          if (file.type.indexOf('image') !== -1) {
            file.url = file.response.fileNameUrl;
          } else {
            // 上传文件时，不提供下载地址。
            file.tfsUrl = file.response.fileNameUrl;
          }
          file.id = file.response.result;
        }
        return file;
      });

      // 3. 按照服务器返回信息筛选成功上传的文件
      fileList = fileList.filter(function (file) {
        if (file.response) {
          if (file.response.status === 'failed') {
            _message3["default"].error(file.response.resultMsg);
            return false;
          }
        }
        return true;
      });

      _this.props.onChange(fileList);
      _this.setState({
        value: fileList
      });
    };

    _this.state = {
      value: _this.props.value
    };
    return _this;
  }

  ImgUpload.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.value) {
      this.setState({ value: nextProps.value });
    }
  };

  // 上传文件之前的钩子


  /* eslint-disable */
  ImgUpload.prototype.render = function render() {
    var _classNames;

    var value = this.state.value;

    var _props = this.props,
        triggerText = _props.triggerText,
        exampleUrl = _props.exampleUrl,
        exampleText = _props.exampleText,
        max = _props.max,
        others = _objectWithoutProperties(_props, ['triggerText', 'exampleUrl', 'exampleText', 'max']);

    var className = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, this.props.className, this.props.className), _defineProperty(_classNames, 'clearfix', true), _classNames));

    var options = _extends({
      listType: 'picture-card',
      withCredentials: true,
      beforeUpload: this.beforeUpload
    }, others, {
      onChange: this.normalizeUploadValue,
      fileList: value,
      onPreview: function onPreview(file) {
        return window.open(file.url);
      }
    });

    return _react2["default"].createElement(
      'div',
      { className: className },
      _react2["default"].createElement(
        _upload2["default"],
        options,
        max === 0 || value.length < max ? _react2["default"].createElement(
          'div',
          null,
          _react2["default"].createElement(_icon2["default"], { type: 'plus' }),
          _react2["default"].createElement(
            'div',
            { className: 'ant-upload-text' },
            triggerText
          )
        ) : null
      ),
      exampleUrl ? _react2["default"].createElement(
        'a',
        { href: exampleUrl, target: '_blank', className: 'ant-upload-example' },
        _react2["default"].createElement('img', { alt: '', src: exampleUrl }),
        exampleText ? _react2["default"].createElement(
          'span',
          null,
          exampleText
        ) : null
      ) : null
    );
  };

  return ImgUpload;
}(_react.Component), _class.propTypes = {
  className: _propTypes2["default"].string,
  exampleUrl: _propTypes2["default"].any,
  exampleText: _propTypes2["default"].string,
  triggerText: _propTypes2["default"].string,
  fileExt: _propTypes2["default"].array,
  max: _propTypes2["default"].number,
  maxSize: _propTypes2["default"].number, // 单位KB
  onChange: _propTypes2["default"].func,
  value: _propTypes2["default"].any,
  onFilterList: _propTypes2["default"].func
}, _class.defaultProps = {
  exampleUrl: '',
  exampleText: '示例',
  triggerText: '上传照片',
  fileExt: ['image/jpeg', 'image/jpg', 'image/png'],
  maxSize: 20 * 1024, // 20M
  max: 0, // 无限制
  value: [],
  onChange: function onChange() {}
}, _temp);
exports["default"] = ImgUpload;
module.exports = exports['default'];