'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

exports.map2OptionsExtra = map2OptionsExtra;

require('antd/lib/row/style/css');

require('antd/lib/col/style/css');

require('antd/lib/select/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../common/utils');

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Option = _select2["default"].Option;
function map2OptionsExtra(map) {
  return Object.keys(map).map(function (key) {
    return _react2["default"].createElement(
      Option,
      { key: key, disabled: map[key].disabled },
      map[key].name
    );
  });
}

/**
 * 公共组件 - 选择渲染
 * 前置一个选择框，根据选择渲染不同的内容
 */

var SelectRender = (_temp = _class = function (_Component) {
  _inherits(SelectRender, _Component);

  function SelectRender(props) {
    _classCallCheck(this, SelectRender);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.onValueChange = function (e, key) {
      var value = _this.state.value;

      var newValue = (0, _utils.getValueFromEvent)(e);
      value[key] = newValue;

      _this.setState({ value: value });
      _this.props.onChange(value);
    };

    _this.renderSecondChoice = function () {
      var value = _this.state.value;

      var opt = _this.cfgObject[value.type];
      if (opt && !opt.disabled && opt.render) {
        return opt.render(value, _this.onValueChange);
      }
      return null;
    };

    _this.selectProps = {
      size: 'large',
      placeholder: '请选择',
      style: { width: '100%' },
      getPopupContainer: _this.props.getPopupContainer
    };

    _this.state = {
      value: _extends({}, props.value)
    };
    return _this;
  }

  SelectRender.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps !== this.props && nextProps.value && nextProps.value.type) {
      this.setState({
        value: _extends({}, nextProps.value)
      });
    }
  };

  // 记录每次值变化，更新内部外部状态


  SelectRender.prototype.render = function render() {
    var _this2 = this;

    var value = this.state.value;


    this.cfgObject = this.props.options.reduce(function (preV, current) {
      preV[current.key] = current;
      return preV;
    }, {});

    this.selectOptions = map2OptionsExtra(this.cfgObject);

    // 如果找不到type对应的option，则默认展示第一项
    this.defaultType = this.props.defaultType || this.props.options[0].key;
    if (Object.keys(this.cfgObject).indexOf(value.type) === -1) {
      value.type = this.defaultType;
    }

    // 判断布局
    var display = this.cfgObject[value.type].display;

    return _react2["default"].createElement(
      'div',
      { className: 'hrui-select-render' },
      _react2["default"].createElement(
        _row2["default"],
        null,
        _react2["default"].createElement(
          _col2["default"],
          { span: '7', style: { marginTop: -1 } },
          _react2["default"].createElement(
            _select2["default"],
            _extends({}, this.selectProps, {
              disabled: this.props.disabled,
              value: value.type,
              onChange: function onChange(e) {
                return _this2.onValueChange(e, 'type');
              } }),
            this.selectOptions
          )
        ),
        display !== 'block' ? _react2["default"].createElement(
          _col2["default"],
          { span: '17', className: 'fn-pl8' },
          this.renderSecondChoice(value.type)
        ) : null
      ),
      display === 'block' ? _react2["default"].createElement(
        'div',
        null,
        this.renderSecondChoice(value.type)
      ) : null
    );
  };

  return SelectRender;
}(_react.Component), _class.propTypes = {
  options: _propTypes2["default"].array, // 配置
  defaultType: _propTypes2["default"].string, // 默认选项
  value: _propTypes2["default"].object,
  onChange: _propTypes2["default"].func,
  disabled: _propTypes2["default"].bool, // 下拉框禁用
  getPopupContainer: _propTypes2["default"].func
}, _class.defaultProps = {
  value: {},
  onChange: function onChange() {},
  getPopupContainer: function getPopupContainer() {
    return document.body;
  }
}, _temp);
exports["default"] = SelectRender;