'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _table = require('antd/lib/table');

var _table2 = _interopRequireDefault(_table);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _input = require('antd/lib/input');

var _input2 = _interopRequireDefault(_input);

var _form = require('antd/lib/form');

var _form2 = _interopRequireDefault(_form);

var _class, _temp;

require('antd/lib/table/style/css');

require('antd/lib/button/style/css');

require('antd/lib/input/style/css');

require('antd/lib/form/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash.clonedeep');

var _lodash2 = _interopRequireDefault(_lodash);

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var FormItem = _form2["default"].Item;
var noop = function noop() {};

var EditableTable = (_temp = _class = function (_Component) {
  _inherits(EditableTable, _Component);

  function EditableTable(props) {
    _classCallCheck(this, EditableTable);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.sourceKeyList = [];
    _this.originRowClassName = _this.props.rowClassName;
    _this.state = {
      tableEditing: false,
      rowEditing: false,
      savingTable: false,
      savingRow: false,
      tables: _this.handleTableProps(),
      editRowIndex: -1
    };

    _this.editTable = _this.editTable.bind(_this);
    _this.saveTable = _this.saveTable.bind(_this);
    _this.cancelTable = _this.cancelTable.bind(_this);
    _this.editRow = _this.editRow.bind(_this);
    _this.saveRow = _this.saveRow.bind(_this);
    _this.cancelRow = _this.cancelRow.bind(_this);
    return _this;
  }

  EditableTable.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
    this.handleTableProps();
    return true;
  };

  EditableTable.prototype.handleTableProps = function handleTableProps() {
    var _this2 = this;

    var getFieldProps = this.props.form.getFieldProps;
    var rowEdit = this.props.rowEdit;

    var tableProps = (0, _lodash2["default"])(this.props);
    if (Object.hasOwnProperty.call(tableProps, 'className')) {
      delete tableProps.className;
    }
    if (Object.hasOwnProperty.call(tableProps, 'empty')) {
      delete tableProps.empty;
    }
    if (Object.hasOwnProperty.call(tableProps, 'rowEdit')) {
      delete tableProps.rowEdit;
    }
    if (Object.hasOwnProperty.call(tableProps, 'onSaveTable')) {
      delete tableProps.onSaveTable;
    }
    if (Object.hasOwnProperty.call(tableProps, 'onSaveRow')) {
      delete tableProps.onSaveRow;
    }

    var columns = tableProps.columns;


    columns.map(function (col) {
      if (col.editable) {
        var originRender = col.render;
        col.render = function (text, record, index) {
          return _react2["default"].createElement(
            'div',
            { className: 'hermes-editable-td' },
            _react2["default"].createElement(
              'div',
              { className: 'hermes-editable-origin' },
              originRender ? originRender(text, record, index) : text
            ),
            _react2["default"].createElement(
              FormItem,
              { className: 'hermes-editable-form-item' },
              col.formItem ? col.formItem(getFieldProps, col.dataIndex + (index + 1), text) : _react2["default"].createElement(_input2["default"], getFieldProps(col.dataIndex + (index + 1), {
                initialValue: text
              }))
            )
          );
        };
      }

      if (Object.prototype.hasOwnProperty.call(col, 'editable')) {
        _this2.sourceKeyList.push(col.dataIndex);
        delete col.editable;
      }

      if (Object.prototype.hasOwnProperty.call(col, 'verify')) {
        delete col.verify;
      }

      return col;
    });

    if (rowEdit) {
      var operation = {
        title: rowEdit.title || '操作',
        key: rowEdit.key || 'operation',
        dataIndex: rowEdit.dataIndex || 'operation',
        render: function render(text, record, index) {
          var originRender = rowEdit.render;
          var _state = _this2.state,
              rowEditing = _state.rowEditing,
              tableEditing = _state.tableEditing,
              savingRow = _state.savingRow,
              editRowIndex = _state.editRowIndex;

          var edit = _react2["default"].createElement(
            'div',
            { className: 'edit-row-wrapper' },
            _react2["default"].createElement(
              'span',
              { className: 'edit-row-btn' + (tableEditing ? ' disabled' : ''), onClick: function onClick() {
                  _this2.editRow(index);
                }, style: { display: rowEditing && index === editRowIndex ? 'none' : 'inline' } },
              '\u7F16\u8F91'
            ),
            _react2["default"].createElement(
              'div',
              { className: 'handel-row-edit', style: { display: rowEditing && index === editRowIndex ? 'inline' : 'none' } },
              _react2["default"].createElement(
                'span',
                { className: 'edit-row-btn', onClick: function onClick(e) {
                    _this2.saveRow(index, e);
                  } },
                '\u4FDD\u5B58'
              ),
              _react2["default"].createElement(
                'span',
                { className: 'ft-bar' },
                '|'
              ),
              _react2["default"].createElement(
                'span',
                { className: 'edit-row-btn' + (savingRow ? ' disabled' : ''), onClick: _this2.cancelRow },
                '\u53D6\u6D88'
              )
            )
          );
          return _react2["default"].createElement(
            'div',
            { className: 'hermes-edit-row' },
            originRender ? originRender(text, record, index, edit) : edit
          );
        }
      };
      if (rowEdit.width) operation.width = rowEdit.width;
      if (rowEdit.className) operation.className = rowEdit.className;
      if (rowEdit.fixed) operation.className = rowEdit.fixed;
      columns.push(operation);
    }

    return tableProps;
  };

  EditableTable.prototype.editTable = function editTable() {
    if (this.state.tableEditing) return;
    this.setState({
      tableEditing: true
    });
  };

  EditableTable.prototype.saveTable = function saveTable(e) {
    var _this3 = this;

    e.preventDefault();
    if (this.state.savingTable) return;
    this.props.form.validateFields(function (errors, values) {
      if (!errors) {
        _this3.setState({
          savingTable: true
        });

        var dataSource = _this3.state.tables.dataSource;
        dataSource.map(function (data, idx) {
          _this3.sourceKeyList.map(function (item) {
            if (values[item + (idx + 1)]) {
              data[item] = values[item + (idx + 1)];
            }
            return data[item];
          });
          return data;
        });
        var savePro = function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return _this3.props.onSaveTable((0, _lodash2["default"])(dataSource));

                  case 2:
                  case 'end':
                    return _context.stop();
                }
              }
            }, _callee, _this3);
          }));

          return function savePro() {
            return _ref.apply(this, arguments);
          };
        }();

        savePro().then(function () {
          dataSource.map(function (item) {
            Object.keys(item).map(function (i) {
              if (item[i] instanceof Array) {
                item[i] = item[i].join(',');
              }
              return item[i];
            });
            return item;
          });

          _this3.setState({
            savingTable: false,
            tableEditing: false
          });
        });
      }
    });
  };

  EditableTable.prototype.cancelTable = function cancelTable() {
    if (!this.state.tableEditing) return;
    this.setState({
      tableEditing: false
    });
    if (this.props.empty) {
      this.props.form.resetFields();
    }
  };

  EditableTable.prototype.editRow = function editRow(idx) {
    var _this4 = this;

    if (this.state.tableEditing) return;

    var rowClassName = function rowClassName(record, index) {
      var temp = _this4.originRowClassName ? _this4.originRowClassName(record, index) + ' ' : '';
      return idx === index ? temp + 'row-editing' : '' + temp;
    };
    this.state.tables.rowClassName = rowClassName;
    this.setState({
      rowEditing: true,
      editRowIndex: idx
    });
  };

  EditableTable.prototype.saveRow = function saveRow(idx, e) {
    var _this5 = this;

    e.preventDefault();
    if (this.state.savingRow) return;
    this.props.form.validateFields(function (errors, values) {
      if (!errors) {
        _this5.setState({
          savingRow: true
        });

        var dataSource = _this5.state.tables.dataSource[idx];
        Object.keys(dataSource).map(function (i) {
          if (values[i + (idx + 1)]) {
            dataSource[i] = values[i + (idx + 1)];
          }
          return dataSource[i];
        });
        var savePro = function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _context2.next = 2;
                    return _this5.props.onSaveRow((0, _lodash2["default"])(dataSource), idx);

                  case 2:
                  case 'end':
                    return _context2.stop();
                }
              }
            }, _callee2, _this5);
          }));

          return function savePro() {
            return _ref2.apply(this, arguments);
          };
        }();

        savePro().then(function () {
          var rowClassName = function rowClassName(record, index) {
            var temp = _this5.originRowClassName ? _this5.originRowClassName(record, index) + ' ' : '';
            return temp;
          };
          _this5.state.tables.rowClassName = rowClassName;
          Object.keys(dataSource).map(function (item) {
            if (dataSource[item] instanceof Array) {
              dataSource[item] = dataSource[item].join(',');
            }
            return dataSource[item];
          });
          _this5.setState({
            savingRow: false,
            rowEditing: false
          });
        });
      }
    });
  };

  EditableTable.prototype.cancelRow = function cancelRow() {
    var _this6 = this;

    if (!this.state.rowEditing) return;
    var rowClassName = function rowClassName(record, index) {
      var temp = _this6.originRowClassName ? _this6.originRowClassName(record, index) + ' ' : '';
      return temp;
    };
    this.state.tables.rowClassName = rowClassName;
    this.setState({
      rowEditing: false,
      editRowIndex: -1
    });
    if (this.props.empty) {
      this.props.form.resetFields();
    }
  };

  EditableTable.prototype.findParent = function findParent(ele, parentTag) {
    var parentNode = ele.parentNode;
    while (parentNode) {
      if (parentNode.tagName.toLowerCase() === parentTag) break;
      parentNode = parentNode.parentNode;
    }
    return parentNode;
  };

  EditableTable.prototype.render = function render() {
    var className = this.props.className;
    var _state2 = this.state,
        tableEditing = _state2.tableEditing,
        rowEditing = _state2.rowEditing,
        saving = _state2.saving,
        tables = _state2.tables;


    return _react2["default"].createElement(
      'div',
      { className: 'hermes-editable-table-block' + (tableEditing ? ' table-editing' : '') + (className.length ? ' ' + className : '') },
      _react2["default"].createElement(
        _form2["default"],
        null,
        _react2["default"].createElement(
          'div',
          { className: 'hermes-edit-btn-group' + (tableEditing ? ' toggleBtn' : '') },
          _react2["default"].createElement(
            _button2["default"],
            { type: 'primary', onClick: this.editTable, disabled: rowEditing },
            '\u7F16\u8F91'
          ),
          _react2["default"].createElement(
            _button2["default"],
            { type: 'primary', onClick: this.saveTable, loading: saving },
            '\u4FDD\u5B58'
          ),
          _react2["default"].createElement(
            _button2["default"],
            { onClick: this.cancelTable, disabled: saving },
            '\u53D6\u6D88'
          )
        ),
        _react2["default"].createElement(_table2["default"], tables)
      )
    );
  };

  return EditableTable;
}(_react.Component), _class.propTypes = {
  className: _propTypes2["default"].string,
  empty: _propTypes2["default"].bool,
  rowEdit: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].object]),
  onSaveTable: _propTypes2["default"].func,
  onSaveRow: _propTypes2["default"].func
}, _class.defaultProps = {
  className: '',
  empty: false,
  rowEdit: false,
  onSaveTable: noop,
  onSaveRow: noop
}, _temp);

/* eslint-disable */

EditableTable = _form2["default"].create({})(EditableTable);

exports["default"] = EditableTable;
module.exports = exports['default'];