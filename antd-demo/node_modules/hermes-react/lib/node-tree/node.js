'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Node = (_temp = _class = function (_Component) {
  _inherits(Node, _Component);

  function Node() {
    _classCallCheck(this, Node);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Node.prototype.render = function render() {
    return _react2["default"].createElement(
      'div',
      {
        'data-layoutId': this.props.nodeData.nodeLayoutId,
        'data-hasChildren': this.props.nodeData.children && this.props.nodeData.children.length > 0,
        className: this.props.isChosen ? 'node-container chosen' : 'node-container',
        onClick: this.props.onClick,
        style: this.props.style
      },
      this.props.nodeRender(this.props.nodeData)
    );
  };

  return Node;
}(_react.Component), _class.propTypes = {
  nodeRender: _propTypes2["default"].func,
  onClick: _propTypes2["default"].func,
  nodeData: _propTypes2["default"].object,
  isChosen: _propTypes2["default"].bool,
  style: _propTypes2["default"].object
}, _temp);
exports["default"] = Node;
module.exports = exports['default'];