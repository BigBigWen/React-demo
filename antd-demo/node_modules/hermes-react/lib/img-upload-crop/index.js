'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _upload = require('antd/lib/upload');

var _upload2 = _interopRequireDefault(_upload);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

require('antd/lib/modal/style/css');

require('antd/lib/upload/style/css');

require('antd/lib/icon/style/css');

require('antd/lib/message/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = require('../img-crop-modal/index');

var _index2 = _interopRequireDefault(_index);

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
  @ Description: 将裁剪的空白部分的-X, -Y值转换为0， 并计算真正的裁剪的图片的高宽
 */

var MyUpload = (_temp = _class = function (_Component) {
  _inherits(MyUpload, _Component);

  function MyUpload(props) {
    _classCallCheck(this, MyUpload);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.getSizeErrorMsg = function (size) {
      if (size < 1024) {
        return '\u56FE\u7247\u5DF2\u8D85\u8FC7' + size + 'KB';
      } else if (size < 1024 * 1024) {
        var a = size / 1024;
        return '\u56FE\u7247\u5DF2\u8D85\u8FC7' + a + 'MB';
      } else if (size < 1024 * 1024 * 1024) {
        var _a = size / 1024 / 1024;
        return '\u56FE\u7247\u5DF2\u8D85\u8FC7' + _a + 'GB';
      }
      return '图片超过限制';
    };

    _this.beforeUpload = function (file) {
      var _this$props = _this.props,
          fileExt = _this$props.fileExt,
          maxSize = _this$props.maxSize;

      if (fileExt.indexOf(file.type) < 0) {
        _message3["default"].error('图片格式错误');
        return false;
      }
      // 单个文件限制大小
      if (file.size > maxSize * 1024) {
        _message3["default"].error(_this.getSizeErrorMsg(maxSize));
        return false;
      }
      return true;
    };

    _this.handleChange = function (info) {
      if (Array.isArray(info)) {
        return info;
      }
      if (!info) {
        return [];
      }

      var fileList = info.fileList;
      fileList = fileList.slice(fileList.length >= 1 ? -1 : 0);

      if (fileList && fileList.length > 0 && fileList[0].status !== 'done') {
        // 受控函数,需要回填值
        _this.setState({
          fileList: fileList
        });
      } else if (fileList && fileList.length > 0) {
        var result = fileList && fileList[0].response;
        var url = _this.props.onUpload(result);
        if (!url) {
          _this.setState({
            fileList: []
          });
        } else {
          _this.setState({
            showCropView: true,
            logoFileId: url
          });
        }
      } else {
        _this.setState({
          fileList: []
        });
      }
      _this.props.onChange(fileList);
    };

    _this.cancelShowCropView = function () {
      _this.props.onChange([]);
      _this.setState({
        fileList: [],
        showCropView: false
      });
    };

    _this.cropPic = function () {
      var _this$state = _this.state,
          crop = _this$state.crop,
          logoFileId = _this$state.logoFileId;

      if (_this.props.onCropPic) {
        _this.props.onCropPic(_extends({}, crop, { url: logoFileId })).then(function (res) {
          var fileList = [{
            uid: res.id,
            id: res.id,
            url: res.url,
            status: 'done'
          }];
          _this.props.onChange(fileList);
          _this.setState({
            showCropView: false,
            showUploadList: true,
            fileList: fileList
          });
        })["catch"](function (res) {
          _message3["default"].warning(res || '网络繁忙，请稍后重试');
        });
      }
    };

    _this.onPreview = function (file) {
      _this.setState({
        priviewImage: file.url
      });
    };

    _this.state = {
      showCropView: false,
      logoFileId: '',
      showUploadList: _this.props.value || [],
      fileList: _this.props.value || [],
      priviewImage: '',
      cropInfo: null
    };
    return _this;
  }

  MyUpload.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.value !== nextProps.value) {
      this.setState({
        fileList: nextProps.value
      });
    }
  };

  // 获取图片大小


  // 上传之前校图片格式尺寸


  // 图片上传处理


  // 取消裁剪浮层


  // 裁剪图片函数


  MyUpload.prototype.render = function render() {
    var _this2 = this;

    var _state = this.state,
        showCropView = _state.showCropView,
        logoFileId = _state.logoFileId,
        fileList = _state.fileList,
        showUploadList = _state.showUploadList,
        crop = _state.crop;
    var _props = this.props,
        exampleUrl = _props.exampleUrl,
        exampleText = _props.exampleText,
        triggerText = _props.triggerText;


    var className = (0, _classnames2["default"])(_defineProperty({}, this.props.className, this.props.className));

    var props = _extends({
      listType: 'picture-card',
      action: this.props.action,
      withCredentials: true,
      onPreview: this.onPreview,
      name: 'file'
    }, this.props, {
      style: { width: 'auto', height: 'auto' },
      onChange: this.handleChange,
      showUploadList: showUploadList,
      fileList: fileList,
      value: fileList,
      beforeUpload: this.beforeUpload
    });

    var cropOption = {
      url: logoFileId,
      isModal: false,
      over: true,
      onChange: function onChange(_ref) {
        var valid = _ref.valid,
            imgWidth = _ref.imgWidth,
            imgHeight = _ref.imgHeight;

        _this2.setState({
          crop: _extends({}, valid, { orgWidth: imgWidth, orgHeight: imgHeight })
        });
      }
    };
    var cropStyleWidth = this.props.style.width;
    var modalWidth = crop && this.props.getPicInfo ? cropStyleWidth * 2 + 32 : cropStyleWidth + 32;
    var modalTop = 100;
    if (window.top !== window) {
      modalTop = window.top.scrollY - 100;
    }
    return _react2["default"].createElement(
      'div',
      { className: className },
      _react2["default"].createElement(
        _upload2["default"],
        props,
        fileList.length < 1 ? _react2["default"].createElement(
          'div',
          null,
          _react2["default"].createElement(_icon2["default"], { type: 'plus' }),
          _react2["default"].createElement(
            'div',
            { className: 'ant-upload-text' },
            triggerText
          )
        ) : null
      ),
      exampleUrl ? _react2["default"].createElement(
        'a',
        { href: exampleUrl, target: '_blank', rel: 'noopener noreferrer', className: 'ant-upload-example' },
        _react2["default"].createElement('img', { alt: '', src: exampleUrl }),
        exampleText ? _react2["default"].createElement(
          'span',
          null,
          exampleText
        ) : null
      ) : null,
      showCropView ? _react2["default"].createElement(
        _modal2["default"],
        {
          maskClosable: false,
          width: modalWidth,
          visible: showCropView,
          onOk: this.cropPic,
          onCancel: this.cancelShowCropView,
          style: { top: modalTop }
        },
        _react2["default"].createElement(
          'div',
          { style: { display: 'inline-block', marginTop: 20, width: cropStyleWidth } },
          _react2["default"].createElement(_index2["default"], _extends({}, this.props, cropOption))
        ),
        crop && this.props.getPicInfo ? this.props.getPicInfo(_extends({}, crop, { url: logoFileId })) : null
      ) : null,
      this.state.priviewImage ? _react2["default"].createElement(
        _modal2["default"],
        {
          width: cropStyleWidth,
          visible: true,
          footer: null,
          onCancel: function onCancel() {
            _this2.setState({ priviewImage: '' });
          } },
        _react2["default"].createElement(
          'div',
          { style: { overflow: 'auto' } },
          _react2["default"].createElement('img', { style: { width: '100%', height: '100%' }, src: this.state.priviewImage, role: 'presentation' })
        )
      ) : null
    );
  };

  return MyUpload;
}(_react.Component), _class.propTypes = {
  className: _propTypes2["default"].string,
  value: _propTypes2["default"].any, // 初始化图片的值
  onChange: _propTypes2["default"].func, // 裁剪完后触发改函数
  fileExt: _propTypes2["default"].array, // 可以上传的图片类型
  maxSize: _propTypes2["default"].number, // 可以上传的图片的最大值
  action: _propTypes2["default"].string, // 图片上传地址
  onUpload: _propTypes2["default"].func, // 图片上传后处理函数，返回值为上传后图片的完整url
  onCropPic: _propTypes2["default"].func, // 图片裁剪后处理函数，改函数输入参数为裁剪的图片信息，输出为一个promise
  exampleUrl: _propTypes2["default"].any,
  exampleText: _propTypes2["default"].string,
  triggerText: _propTypes2["default"].any,
  style: _propTypes2["default"].object, //  弹出的浮层看的样式
  getPicInfo: _propTypes2["default"].func
}, _class.defaultProps = {
  exampleUrl: '',
  exampleText: '示例',
  triggerText: '上传照片',
  fileExt: ['image/jpeg', 'image/jpg', 'image/png'],
  maxSize: 20 * 1024, // 20M
  style: { width: 500, height: 500 },
  onChange: function onChange() {},
  onUpload: function onUpload(result) {
    if (result && result.status === 'failed') {
      _message3["default"].warning(result.errorMessage || '网络繁忙，请稍后重试');
      return null;
    }
    return result.url;
  },
  onCropPic: function onCropPic() {}
}, _temp);
exports["default"] = MyUpload;
module.exports = exports['default'];