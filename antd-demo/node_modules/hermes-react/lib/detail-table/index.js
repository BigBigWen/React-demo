'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var DetailTable = (_temp2 = _class = function (_Component) {
  _inherits(DetailTable, _Component);

  function DetailTable() {
    var _temp, _this, _ret;

    _classCallCheck(this, DetailTable);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.renderEmptyCell = function (idx, colSpan) {
      return _react2["default"].createElement('td', { key: 'empty_cell-' + idx, className: _this.props.emptyCellClassName, colSpan: colSpan });
    }, _this.renderCellPair = function (_ref, idx) {
      var label = _ref.label,
          value = _ref.value,
          _ref$colSpan = _ref.colSpan,
          colSpan = _ref$colSpan === undefined ? 1 : _ref$colSpan;
      return [_react2["default"].createElement(
        'td',
        { key: 'cell_label-' + idx, className: _this.props.labelCellClassName },
        label
      ), _react2["default"].createElement(
        'td',
        { key: 'cell_value-' + idx, className: _this.props.valueCellClassName, colSpan: colSpan },
        value
      )];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  DetailTable.prototype.render = function render() {
    var _props = this.props,
        dataSource = _props.dataSource,
        columnCount = _props.columnCount,
        tableClassName = _props.tableClassName;

    var rows = [];
    var rowIdx = 0;
    var row = [];
    var colSpanCount = 0;
    for (var idx = 0; idx < dataSource.length; idx++) {
      var cellData = dataSource[idx];
      if (!cellData.isSkipped) {
        var cellPair = this.renderCellPair(cellData, idx);
        var _cellData$colSpan = cellData.colSpan,
            colSpan = _cellData$colSpan === undefined ? 1 : _cellData$colSpan;
        // 如果当前行已经放不下新单元格

        if (colSpan + colSpanCount + 1 > columnCount) {
          // 先用空单元格补齐当前行
          if (columnCount > colSpanCount) {
            row.push(this.renderEmptyCell(rowIdx, columnCount - colSpanCount));
          }
          // 输出当前行
          rows.push(_react2["default"].createElement(
            'tr',
            { key: 'row-' + rowIdx++ },
            row
          ));
          // 再另起一行，将新单元格放入新行
          row = [].concat(cellPair);
          colSpanCount = colSpan + 1;
        } else {
          row = row.concat(cellPair);
          colSpanCount = colSpanCount + colSpan + 1;
        }
      }
    }
    // 如有必要，用空单元格补齐最后一行
    if (columnCount > colSpanCount) {
      row.push(this.renderEmptyCell(rowIdx, columnCount - colSpanCount));
    }
    // 输出最后一行
    rows.push(_react2["default"].createElement(
      'tr',
      { key: 'row-' + rowIdx++ },
      row
    ));

    return _react2["default"].createElement(
      'table',
      { className: tableClassName },
      _react2["default"].createElement(
        'tbody',
        null,
        rows
      )
    );
  };

  return DetailTable;
}(_react.Component), _class.propTypes = {
  dataSource: _propTypes2["default"].arrayOf(_propTypes2["default"].shape({
    label: _propTypes2["default"].string,
    value: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string, _propTypes2["default"].arrayOf(_propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]))]),
    colSpan: _propTypes2["default"].number,
    isSkipped: _propTypes2["default"].bool
  })),
  columnCount: _propTypes2["default"].number,
  tableClassName: _propTypes2["default"].string,
  labelCellClassName: _propTypes2["default"].string,
  valueCellClassName: _propTypes2["default"].string,
  emptyCellClassName: _propTypes2["default"].string
}, _class.defaultProps = {
  dataSource: [],
  columnCount: 6,
  tableClassName: 'kb-detail-table',
  labelCellClassName: 'kb-detail-table-label',
  valueCellClassName: 'kb-detail-table-value',
  emptyCellClassName: 'kb-detail-table-empty'
}, _temp2);
exports["default"] = DetailTable;
module.exports = exports['default'];