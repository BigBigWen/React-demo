'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _modal = require('antd/lib/modal');

var _modal2 = _interopRequireDefault(_modal);

var _pagination = require('antd/lib/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _spin = require('antd/lib/spin');

var _spin2 = _interopRequireDefault(_spin);

var _upload = require('antd/lib/upload');

var _upload2 = _interopRequireDefault(_upload);

var _popover = require('antd/lib/popover');

var _popover2 = _interopRequireDefault(_popover);

var _button = require('antd/lib/button');

var _button2 = _interopRequireDefault(_button);

var _icon = require('antd/lib/icon');

var _icon2 = _interopRequireDefault(_icon);

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

require('antd/lib/modal/style/css');

require('antd/lib/pagination/style/css');

require('antd/lib/spin/style/css');

require('antd/lib/upload/style/css');

require('antd/lib/popover/style/css');

require('antd/lib/button/style/css');

require('antd/lib/icon/style/css');

require('antd/lib/message/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lazyImg = require('../lazy-img');

var _lazyImg2 = _interopRequireDefault(_lazyImg);

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var LazyContainer = _lazyImg2["default"].Container;

var noop = function noop() {};
// 减少了listparam，listUrl，selectedFileList, transformListData, beforeErrorHandler参数
var ImgPickerModal = (_temp = _class = function (_Component) {
  _inherits(ImgPickerModal, _Component);

  function ImgPickerModal(props) {
    _classCallCheck(this, ImgPickerModal);

    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

    _this.getSelected = function () {
      var _this$state = _this.state,
          _this$state$selectedM = _this$state.selectedMap,
          selectedMap = _this$state$selectedM === undefined ? {} : _this$state$selectedM,
          _this$state$data = _this$state.data,
          data = _this$state$data === undefined ? [] : _this$state$data,
          selected = _this$state.selected;

      var selectedIds = _extends({}, selectedMap);
      var selectedFileList = [].concat(_toConsumableArray(data), _toConsumableArray(selected)).filter(function (row) {
        var choosed = selectedIds[row.id];
        delete selectedIds[row.id];
        return choosed;
      });
      return selectedFileList;
    };

    _this.onOk = function () {
      _this.props.onOk(_this.getSelected());
      _this.onCancel();
    };

    _this.onCancel = function () {
      if (!_this.props.onCancel) {
        _this.setState({ visible: !_this.state.visible });
      }
    };

    _this.toNewPicView = function () {
      var picContainer = _this.picContainer;
      if (picContainer) {
        picContainer.scrollTop = picContainer.scrollHeight;
      }
    };

    _this.handleChange = function (info) {
      var fileList = info.fileList.filter(function (file) {
        if (file.response) {
          var _this$props$uploadCha = _this.props.uploadChange(file.response),
              data = _this$props$uploadCha.data,
              success = _this$props$uploadCha.success,
              silence = _this$props$uploadCha.silence;

          if (!success) {
            if (!silence) {
              _message3["default"].error('上传失败', 1);
            }
            _this.setState({ loading: false });
          } else {
            if (!silence) {
              _message3["default"].success('上传成功', 1);
            }

            if (_this.props.chooseUpload) {
              _this.selectPhoto(data && data.id, data);
            }

            var _this$state$paginatio = _this.state.pagination,
                pagination = _this$state$paginatio === undefined ? {} : _this$state$paginatio;

            _this.setState({
              loading: false,
              pagination: _extends({}, _this.state.pagination, { current: 1 }) // 上传完直接跳入第一页，需要服务端配合将图片放入第一页，个人感觉不理想
            }, function () {
              if (pagination.total) {
                _this.props.onPageChange(1);
              } else {
                _this.toNewPicView();
              }
            });
          }
          return false;
        }
        return true;
      });
      _this.setState({
        fileList: fileList
      });
    };

    _this.beforeUpload = function (file) {
      var errorFlag = true;
      var beforeUpload = _this.props.beforeUpload;

      if (beforeUpload && typeof beforeUpload === 'function') {
        errorFlag = beforeUpload(file);
      } else if (['image/jpeg', 'image/gif', 'image/png', 'image/bmp'].indexOf(file.type) < 0) {
        _message3["default"].error('图片格式错误');
        errorFlag = false;
      } else if (file.size > 20971520) {
        // 单个文件限制大小为20*1024*1024
        _message3["default"].error('图片已超过20M');
        errorFlag = false;
      } else if (file.size < 204800) {
        // 单个文件限制大小为200*1024
        _message3["default"].error('图片小于200kb');
        errorFlag = false;
      }

      if (errorFlag && !_this.isPromise(errorFlag)) {
        // 如果是promise格式则不能判断loading状态
        _this.setState({ loading: true });
      }
      return errorFlag;
    };

    _this.selectPhoto = function (id, data) {
      var _this$props = _this.props,
          multiple = _this$props.multiple,
          max = _this$props.max,
          limitInfo = _this$props.limitInfo,
          onChange = _this$props.onChange;
      var selectedMap = _this.state.selectedMap;

      var choosedSelect = multiple ? [].concat(_toConsumableArray(_this.state.selected), [data]) : [data];
      if (multiple) {
        if (selectedMap[id]) {
          delete selectedMap[id];
        } else if (Object.keys(selectedMap).length < max) {
          selectedMap[id] = true;
        } else if (limitInfo) {
          _message3["default"].info(limitInfo);
        }
      } else {
        selectedMap = _defineProperty({}, id, true);
      }
      _this.setState({
        selected: choosedSelect,
        selectedMap: selectedMap
      }, function () {
        if (onChange) {
          onChange(_this.getSelected());
        }
      });
    };

    _this.fetchData = function () {
      _this.props.fetch(function (data) {
        var pagination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        _this.setState({
          picLoading: false,
          data: data,
          pagination: pagination
        });
      });
    };

    _this.uploadProps = function () {
      var _this$props2 = _this.props,
          uploadParams = _this$props2.uploadParams,
          uploadUrl = _this$props2.uploadUrl,
          uploadMulti = _this$props2.uploadMulti;

      return {
        action: uploadUrl,
        withCredentials: true,
        data: uploadParams,
        onChange: _this.handleChange,
        beforeUpload: _this.beforeUpload,
        showUploadList: false,
        multiple: uploadMulti,
        fileList: _this.state.fileList
      };
    };

    _this.getPics = function () {
      var lazyLoad = _this.props.lazyLoad;
      var _this$state2 = _this.state,
          data = _this$state2.data,
          selectedMap = _this$state2.selectedMap;

      return data.map(function (row, i) {
        return _react2["default"].createElement(
          'div',
          { key: i, className: 'hermes-photo-picker-list-item', onClick: _this.selectPhoto.bind(_this, row.id, row) },
          lazyLoad ? _react2["default"].createElement(_lazyImg2["default"], { container: _this.picContainer, src: row.thumbUrl ? row.thumbUrl : row.url, alt: 'img', placeholder: '' }) : _react2["default"].createElement('img', { src: row.thumbUrl ? row.thumbUrl : row.url, alt: 'img' }),
          selectedMap[row.id] && _react2["default"].createElement(
            'div',
            { className: 'hermes-photo-picker-list-item-icon' },
            _react2["default"].createElement(_icon2["default"], { type: 'check-circle' })
          )
        );
      });
    };

    _this.state = {
      visible: typeof _this.props.visible === 'boolean' ? _this.props.visible : true,
      data: [], // 图片数据
      selectedMap: _this.props.selected.reduce(function (memo, id) {
        return _extends({}, memo, _defineProperty({}, id, true));
      }, {}), // 选中内容
      selected: [], // 如果是分页选中需做保留处理
      pagination: {}, // 分页的情况
      fileList: [], // 上传的受限模式
      picLoading: true, // 初始化图片loading
      loading: false // 上传loading
    };
    return _this;
  }

  ImgPickerModal.prototype.componentWillMount = function componentWillMount() {
    this.fetchData();
  };

  ImgPickerModal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.visible && this.props.visible !== nextProps.visible) {
      this.setState({
        visible: nextProps.visible
      });
    }
  };

  // to new Pic Position


  ImgPickerModal.prototype.isPromise = function isPromise(obj) {
    return !!obj && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
  };

  ImgPickerModal.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        multiple = _props.multiple,
        min = _props.min,
        uploadUrl = _props.uploadUrl,
        notice = _props.notice,
        _props$onPageChange = _props.onPageChange,
        onPageChange = _props$onPageChange === undefined ? noop : _props$onPageChange,
        uploadNotice = _props.uploadNotice;
    var _state = this.state,
        data = _state.data,
        loading = _state.loading,
        selectedMap = _state.selectedMap,
        picLoading = _state.picLoading,
        visible = _state.visible,
        pagination = _state.pagination;

    var selectedCount = Object.keys(selectedMap).length;

    return _react2["default"].createElement(
      'div',
      null,
      _react2["default"].createElement(
        _modal2["default"],
        _extends({ visible: visible, width: 711, zIndex: 1000, footer: '', onCancel: this.onCancel }, this.props),
        uploadUrl ? _react2["default"].createElement(
          'div',
          { className: 'hermes-photo-picker-header' },
          _react2["default"].createElement(
            'div',
            { className: 'hermes-photo-picker-upload' },
            _react2["default"].createElement(
              _upload2["default"],
              this.uploadProps(),
              uploadNotice ? _react2["default"].createElement(
                _popover2["default"],
                { placement: 'topRight', content: uploadNotice },
                _react2["default"].createElement(
                  _button2["default"],
                  { size: 'large', type: 'ghost', loading: loading },
                  '\u4E0A\u4F20\u65B0\u56FE\u7247'
                )
              ) : _react2["default"].createElement(
                _button2["default"],
                { size: 'large', type: 'ghost', loading: loading },
                '\u4E0A\u4F20\u65B0\u56FE\u7247'
              )
            )
          )
        ) : null,
        _react2["default"].createElement(
          LazyContainer,
          { className: 'hermes-photo-picker-list ' + (pagination && pagination.total ? ' hermes-photo-picker-pagination-list' : ''), ref: function ref(dom) {
              return _this2.picContainer = dom;
            } },
          picLoading ? _react2["default"].createElement(
            'div',
            { style: { textAlign: 'center', lineHeight: '280px' } },
            _react2["default"].createElement(_spin2["default"], null)
          ) : _react2["default"].createElement(
            'div',
            null,
            !(data && data.length) ? _react2["default"].createElement(
              'div',
              { style: { textAlign: 'center', lineHeight: '280px' } },
              '\u6682\u65E0\u56FE\u7247'
            ) : this.getPics()
          )
        ),
        _react2["default"].createElement(
          'div',
          { className: 'hermes-photo-picker-footer' },
          notice ? _react2["default"].createElement(
            'p',
            { className: 'notice-info' },
            notice
          ) : null,
          pagination && pagination.total ? _react2["default"].createElement(
            'div',
            { className: 'hermes-photo-picker-pagination' },
            _react2["default"].createElement(_pagination2["default"], _extends({}, pagination, {
              onChange: function onChange(num) {
                _this2.setState({
                  picLoading: true,
                  pagination: _extends({}, pagination, {
                    current: num
                  })
                }, function () {
                  onPageChange(num);
                });
              } }))
          ) : null,
          _react2["default"].createElement(
            _button2["default"],
            {
              size: 'large',
              type: 'primary',
              onClick: this.onOk,
              disabled: selectedCount === 0 || multiple && selectedCount < min },
            '\u786E\u5B9A',
            multiple ? ' (' + selectedCount + ')' : ''
          )
        )
      )
    );
  };

  return ImgPickerModal;
}(_react.Component), _class.propTypes = {
  // 选择部分
  fetch: _propTypes2["default"].func, // 展现列表获取逻辑
  selected: _propTypes2["default"].array, // 已选择图片,id list
  min: _propTypes2["default"].number, // 最少选择图片数量
  max: _propTypes2["default"].number, // 最多选择图片
  multiple: _propTypes2["default"].bool, // 是否允许选择多个图片
  onChange: _propTypes2["default"].func, // 图片数量变化时候调用
  onOk: _propTypes2["default"].func, // 弹窗选择确认回调函数
  // 基础显示部分
  limitInfo: _propTypes2["default"].string, // 超出文字，业务需要
  notice: _propTypes2["default"].string, // 备注信息
  // 上传部分
  uploadNotice: _propTypes2["default"].any, // 上传提示
  uploadUrl: _propTypes2["default"].string, // 上传图片的url
  uploadMulti: _propTypes2["default"].bool, // 是否允许选择多张图片上传
  uploadParams: _propTypes2["default"].object, // 上传附带参数
  beforeUpload: _propTypes2["default"].func, // 上传筛选函数,函数参数file: {type: string, size: number} ＝> bool false为有错误
  uploadChange: _propTypes2["default"].func, // 上传处理函数，服务器返回函数处理，需要返回{success: false, true. data: {id: string, thumbUrl: string, url: string}};
  chooseUpload: _propTypes2["default"].bool, // 勾选中上传的内容
  lazyLoad: _propTypes2["default"].bool
}, _class.defaultProps = {
  title: ' ',
  notice: '',
  fetch: noop,
  selected: [],
  min: 1,
  max: 9999,
  multiple: true,
  onChange: noop,
  limitInfo: '超出选择限制',
  onOk: noop,
  uploadUrl: '',
  uploadMulti: false,
  uploadParams: {},
  beforeUpload: noop,
  uploadChange: noop,
  chooseUpload: false,
  lazyLoad: false
}, _temp);
exports["default"] = ImgPickerModal;
module.exports = exports['default'];