'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _message2 = require('antd/lib/message');

var _message3 = _interopRequireDefault(_message2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('antd/lib/message/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./style/index.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var View = function (_React$Component) {
  _inherits(View, _React$Component);

  function View() {
    var _temp, _this, _ret;

    _classCallCheck(this, View);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      loaded: false
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  View.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var img = this.img = new Image();
    img.onload = function () {
      _this2.setState({
        loaded: true
      });
    };
    img.onerror = function () {
      _message3["default"].error('图片加载失败，请重试');_this2.img = null;_this2.props.onCancel();
    };
    img.src = this.props.url;
  };

  View.prototype.getTranslateStyle = function getTranslateStyle(translateX, translateY) {
    var translateValue = 'translate(' + translateX + 'px,' + translateY + 'px) translateZ(0)';
    return {
      transform: translateValue,
      WebkitTransform: translateValue
    };
  };

  // 决定遮罩位置信息


  View.prototype.areaClientRect = function areaClientRect() {
    // 只有另一个边小于的时候居中才会出现
    var _props = this.props,
        fillType = _props.fillType,
        crop = _props.crop,
        style = _props.style,
        center = _props.center;

    var width = crop && crop.width ? crop.width : this.img.naturalWidth;
    var height = crop && crop.height ? crop.height : this.img.naturalHeight;
    var rate = width / height;
    var styleW = parseInt(style.width, 10);
    var styleH = parseInt(style.height, 10);
    var type = fillType;
    if (fillType === 'auto') {
      type = width > height ? 'width' : 'height';
    }
    if (fillType === 'short') {
      type = width < height ? 'width' : 'height';
    }
    var cropWidth = type === 'width' ? styleW : styleH * rate;
    var cropHeight = type === 'height' ? styleH : styleW / rate;
    var cropRate = type === 'width' ? width / styleW : height / styleH; // 真实与缩放比
    var outerValue = type === 'height' ? (cropWidth - style.width) / 2 : (cropHeight - style.height) / 2;
    return { type: type, width: cropWidth, height: cropHeight, rate: cropRate, cropX: center && type !== 'width' ? (cropWidth - styleW) / 2 : 0, cropY: center && type !== 'height' ? (cropHeight - styleH) / 2 : 0, outerValue: outerValue > 0 ? outerValue : 0 };
  };

  // 决定图片位置信息


  View.prototype.imgPosition = function imgPosition(rate) {
    var _img = this.img,
        naturalWidth = _img.naturalWidth,
        naturalHeight = _img.naturalHeight;
    var crop = this.props.crop;

    var X = crop && crop.X ? crop.X : 0;
    var Y = crop && crop.Y ? crop.Y : 0;
    var realWidth = naturalWidth / rate;
    var realHeight = naturalHeight / rate;
    var realX = X / rate;
    var realY = Y / rate;
    return { x: realX, y: realY, width: realWidth, height: realHeight };
  };

  View.prototype.render = function render() {
    var loaded = this.state.loaded;
    var _props2 = this.props,
        _props2$className = _props2.className,
        className = _props2$className === undefined ? '' : _props2$className,
        _props2$style = _props2.style,
        style = _props2$style === undefined ? {} : _props2$style,
        _props2$picStyle = _props2.picStyle,
        picStyle = _props2$picStyle === undefined ? {} : _props2$picStyle;

    if (!loaded) {
      return _react2["default"].createElement(
        'div',
        { style: _extends({ textAlign: 'center', lineHeight: parseInt(style.height, 10) + 'px' }, style) },
        'loading...'
      );
    }

    var _areaClientRect = this.areaClientRect(),
        cropWidth = _areaClientRect.width,
        cropHeight = _areaClientRect.height,
        cropRate = _areaClientRect.rate,
        cropY = _areaClientRect.cropY,
        cropX = _areaClientRect.cropX,
        outerValue = _areaClientRect.outerValue,
        type = _areaClientRect.type;

    var _imgPosition = this.imgPosition(cropRate),
        x = _imgPosition.x,
        y = _imgPosition.y,
        width = _imgPosition.width,
        height = _imgPosition.height;

    return _react2["default"].createElement(
      'div',
      { style: _extends({}, style), className: className },
      _react2["default"].createElement(
        'div',
        { className: 'hermes-crop-preview' },
        _react2["default"].createElement(
          'div',
          { className: 'hermes-crop-preview-district', style: _extends({ width: cropWidth, height: cropHeight }, this.getTranslateStyle(-cropX, -cropY)) },
          _react2["default"].createElement(
            'div',
            { style: _extends({}, picStyle, { display: 'inline-block', overflow: 'hidden', width: cropWidth > style.width ? style.width : cropWidth, height: cropHeight > style.height ? style.height : cropHeight }, this.getTranslateStyle(type === 'width' ? 0 : outerValue, type === 'height' ? 0 : outerValue)) },
            _react2["default"].createElement('img', { alt: '', src: this.props.url, className: 'hermes-crop-preview-pic', style: _extends({ height: height, width: width }, this.getTranslateStyle(type === 'width' ? -x : -x - outerValue, type === 'height' ? -y : -y - outerValue)) })
          )
        )
      )
    );
  };

  return View;
}(_react2["default"].Component);

View.propTypes = {
  url: _propTypes2["default"].string.isRequired,
  crop: _propTypes2["default"].object,
  style: _propTypes2["default"].object.isRequired, // 必须要填写长宽，其他自定义
  picStyle: _propTypes2["default"].object,
  fillType: _propTypes2["default"].oneOf(['height', 'width', 'auto', 'short']), // auto 取最长边填满
  center: _propTypes2["default"].bool // 一边占满，另一边是非居中
};

View.defaultProps = {
  center: true,
  fillType: 'auto'
};

exports["default"] = View;
module.exports = exports['default'];