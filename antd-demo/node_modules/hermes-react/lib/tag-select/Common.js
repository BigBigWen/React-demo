'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tag = require('antd/lib/tag');

var _tag2 = _interopRequireDefault(_tag);

require('antd/lib/tag/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

exports["default"] = {
  propTypes: {
    className: _propTypes2["default"].string,
    style: _propTypes2["default"].object,
    options: _propTypes2["default"].array,
    deselect: _propTypes2["default"].bool,
    limit: _propTypes2["default"].number,
    limitedDisable: _propTypes2["default"].bool,
    onLimitExceeded: _propTypes2["default"].func,
    value: _propTypes2["default"].array,
    defaultValue: _propTypes2["default"].array,
    onChange: _propTypes2["default"].func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      options: [],
      deselect: false,
      limitedDisable: true,
      onLimitExceeded: function onLimitExceeded() {},
      onChange: function onChange() {}
    };
  },
  getState: function getState() {
    var options = this.props.options;

    var tagList = void 0;
    if (options && options.length && typeof options[0] === 'string') {
      tagList = options.map(function (v) {
        return {
          label: v,
          value: v
        };
      });
    } else {
      tagList = options;
    }
    var selected = void 0;
    if ('value' in this.props) {
      selected = this.props.value || [];
    } else if ('defaultValue' in this.props) {
      selected = this.props.defaultValue || [];
    } else {
      selected = [];
    }
    return {
      tagList: tagList,
      selected: selected
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if ('value' in nextProps) {
      this.setState({
        selected: nextProps.value || []
      });
    }
  },
  check: function check(label, value) {
    var selectedArr = [];
    var _props = this.props,
        deselect = _props.deselect,
        limit = _props.limit,
        limitedDisable = _props.limitedDisable,
        onLimitExceeded = _props.onLimitExceeded,
        onChange = _props.onChange;
    var _state = this.state,
        tagList = _state.tagList,
        selected = _state.selected,
        radioMode = _state.radioMode;

    var index = selected.indexOf(value);
    if (radioMode) {
      selected.splice(0, selected.length);
      if (!deselect || index === -1) {
        selected.push(value);
      }
    } else if (index > -1) {
      selected.splice(index, 1);
    } else {
      if (limit !== undefined && selected.length > limit - 1) {
        onLimitExceeded();
        return;
      }
      selected.push(value);
    }
    tagList.forEach(function (v) {
      if (selected.indexOf(v.value) > -1) selectedArr.push(v.value);
    });
    this.setState({
      disableAll: !radioMode && limitedDisable && selected.length >= limit,
      selected: selectedArr
    }, function () {
      return onChange(selectedArr, { label: label, value: value });
    });
  },
  render: function render() {
    var _this = this;

    var _props2 = this.props,
        className = _props2.className,
        style = _props2.style;
    var _state2 = this.state,
        tagList = _state2.tagList,
        disableAll = _state2.disableAll;
    var selected = this.state.selected;

    if ('value' in this.props) {
      selected = this.props.value || [];
    }
    var tags = tagList.map(function (v) {
      var cls = void 0;
      if (selected.indexOf(v.value) > -1) {
        cls = 'hermes-tagselect-checked';
      } else if (v.disabled || disableAll) {
        cls = 'hermes-tagselect-disabled';
      } else {
        cls = 'hermes-tagselect-checkable';
      }
      return _react2["default"].createElement(
        _tag2["default"],
        {
          className: cls,
          key: v.value,
          disabled: v.disabled,
          onClick: function onClick() {
            return !v.disabled && _this.check(v.label, v.value);
          } },
        v.label
      );
    });
    return this.props.options.length ? _react2["default"].createElement(
      'div',
      { className: 'hermes-tagselect' + (className ? ' ' + className : ''), style: style },
      tags
    ) : null;
  }
};
module.exports = exports['default'];