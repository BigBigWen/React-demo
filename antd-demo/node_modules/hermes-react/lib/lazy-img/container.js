'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Container = function (_Base) {
  _inherits(Container, _Base);

  function Container(props) {
    _classCallCheck(this, Container);

    var _this = _possibleConstructorReturn(this, _Base.call(this, props));

    _this.reinit = (0, _lodash2["default"])(_this.reinit, 0);
    return _this;
  }

  Container.prototype.componentDidMount = function componentDidMount() {
    this.container = (0, _reactDom.findDOMNode)(this);
    this.images = this.getImages(this.container);
    if (this.images.length) {
      this.isWindowMode = false;
      this.bind();
    } else {
      this.isWindowMode = true;
    }
  };

  Container.prototype.componentWillUnmount = function componentWillUnmount() {
    if (!this.isWindowMode) this.unbind();
  };

  Container.prototype.getImages = function getImages(container) {
    var _this2 = this;

    var images = container.querySelectorAll('img[data-lazy-img]');
    return Array.prototype.slice.call(images).filter(function (v) {
      return _this2.findContainer(v) === container;
    });
  };

  Container.prototype.addImage = function addImage(image) {
    if (this.images.indexOf(image) === -1) {
      this.images.push(image);
    }
  };

  Container.prototype.reinit = function reinit() {
    this.images = this.images.filter(function (v) {
      return document.documentElement.contains(v);
    });
    this.rebind();
  };

  Container.prototype.render = function render() {
    var children = this.props.children;

    return _react2["default"].createElement(
      'div',
      _extends({}, this.props, {
        'data-lazy-container': true
      }),
      children
    );
  };

  return Container;
}(_base2["default"]);

exports["default"] = Container;
module.exports = exports['default'];