'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _class, _temp;

require('antd/lib/row/style/css');

require('antd/lib/col/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _addableRow = require('../addable-row');

var _addableRow2 = _interopRequireDefault(_addableRow);

require('./style/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var AddableRowTable = (_temp = _class = function (_Component) {
  _inherits(AddableRowTable, _Component);

  function AddableRowTable() {
    _classCallCheck(this, AddableRowTable);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  AddableRowTable.prototype.render = function render() {
    var options = this.props.options;


    var sum = 0;
    var thead = options.map(function (opt, i) {
      sum += Number(opt.width);
      return _react2["default"].createElement(
        _col2["default"],
        { key: i, className: 'hrui-add-row-col', span: opt.width },
        opt.title
      );
    });

    return _react2["default"].createElement(
      'div',
      { className: 'hrui-add-row-table' },
      _react2["default"].createElement(
        _row2["default"],
        { className: 'hrui-add-row-table-head' },
        thead,
        _react2["default"].createElement(
          _col2["default"],
          { className: 'hrui-add-row-col', span: String(24 - sum) },
          '\u64CD\u4F5C'
        )
      ),
      _react2["default"].createElement(_addableRow2["default"], this.props)
    );
  };

  return AddableRowTable;
}(_react.Component), _class.propTypes = {
  options: _propTypes2["default"].array // 配置项，配置每个行|列里面的表单项
}, _temp);
exports["default"] = AddableRowTable;
module.exports = exports['default'];