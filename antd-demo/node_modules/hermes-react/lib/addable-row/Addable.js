'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var noop = function noop() {};

/**
 * AddableMixin 可增加的表单组合核心模块
 */

exports["default"] = {
  propTypes: {
    onChange: _propTypes2["default"].func, // 值变化触发函数，适配rc-form
    value: _propTypes2["default"].array, // 值，适配rc-form
    max: _propTypes2["default"].number, // 最大项数
    onAddRow: _propTypes2["default"].func, // 添加触发函数
    onRemoveRow: _propTypes2["default"].func, // 删除触发函数
    options: _propTypes2["default"].array, // 配置项，配置每个行|列里面的表单项
    form: _propTypes2["default"].object // 如果options中需要传入formFieldProps，则需要传入rc-form对象
  },

  getDefaultProps: function getDefaultProps() {
    return {
      form: undefined,
      max: Infinity,
      onChange: noop,
      onAddRow: noop,
      onRemoveRow: noop
    };
  },
  getInitialState: function getInitialState() {
    this.uuid = 0;
    return this.transformPropsToStates(this.props, []);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.value && this.props.value !== nextProps.value) {
      this.setState(this.transformPropsToStates(nextProps, this.state.keys));
    } else if (typeof nextProps.value === 'undefined') {
      this.setState(this.transformPropsToStates(_extends({}, nextProps, {
        value: [{}]
      }), this.state.keys));
    }
  },
  transformPropsToStates: function transformPropsToStates(props, keys) {
    var _this = this;

    var value = props.value;


    if (!value && keys.length === 0) {
      keys.push(this.uuid);
      value = [{}];
    } else if (value.length < keys.length) {
      // keys 长度小于回填值长度时需要减少
      /* eslint-disable no-param-reassign */
      keys = keys.slice(0, value.length);
    } else {
      for (var i = keys.length; i < value.length; i++) {
        keys.push(++this.uuid);
      }
    }

    // 手动对initialValue进行赋值
    value = value.map(function (it) {
      return _this.setRowInitialValue(it, props);
    });

    return {
      keys: keys,
      value: props.value || [{}]
    };
  },
  setRowInitialValue: function setRowInitialValue(row) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
    var options = props.options;

    options.forEach(function (opt) {
      var name = opt.name,
          formFieldProps = opt.formFieldProps;

      if (formFieldProps && formFieldProps.initialValue) {
        row[name] = row[name] || formFieldProps.initialValue;
      }
    });
    return row;
  },
  addRow: function addRow() {
    var max = this.props.max;
    var _state = this.state,
        keys = _state.keys,
        value = _state.value;


    if (keys.length >= max) {
      return;
    }

    keys.push(++this.uuid);
    value.push(this.setRowInitialValue({}));

    this.props.onAddRow(this.uuid, keys);
    this.setState({ keys: keys, value: value });
    this.props.onChange(value);
  },
  removeRow: function removeRow(row) {
    var keys = this.state.keys;
    var value = this.state.value;

    var removedKey = void 0;

    keys = keys.filter(function (k, index) {
      if (k === row) {
        removedKey = k;
        value.splice(index, 1);
      }
      return k !== row;
    });

    this.props.onRemoveRow(removedKey, keys);
    this.setState({ keys: keys, value: value });
    this.props.onChange(value);
  },
  copyRow: function copyRow(row) {
    var max = this.props.max;
    var _state2 = this.state,
        keys = _state2.keys,
        value = _state2.value;


    if (keys.length >= max) {
      return;
    }

    keys.push(++this.uuid);
    value.push(_extends({}, value[row]));

    this.props.onAddRow(this.uuid, keys);
    this.setState({ keys: keys, value: value });
    this.props.onChange(value);
  },
  renderElements: function renderElements(rowId, rowIndex, extra) {
    var _this2 = this;

    var options = this.props.options;
    var value = this.state.value;

    // 遍历options中的每一个构建元素

    return options.map(function (cfg, cfgIndex) {
      var fieldProps = _extends({}, extra);

      if (_this2.props.form && cfg.formFieldProps) {
        // 需要增加fieldProps，配合rc-form进行校验等功能
        fieldProps = _extends({}, cfg.formFieldProps);
        // 覆盖原来的initialValue & onChange & normalize
        fieldProps.initialValue = value[rowIndex][cfg.name] || fieldProps.initialValue;

        var func = fieldProps.onChange;
        // 箭头函数没有arguments
        fieldProps.onChange = function onChange(e) {
          value[rowIndex][cfg.name] = (0, _utils.getValueFromEvent)(e);

          if (func) {
            /* eslint-disable prefer-rest-params */
            var args = Array.prototype.slice.call(arguments).concat(rowIndex);
            func.apply(this, args);
          }

          this.props.onChange(value);
          this.setState({ value: value });
        }.bind(_this2);

        var func2 = fieldProps.normalize;
        // 箭头函数没有arguments
        fieldProps.normalize = function normalize(v) {
          if (func2) {
            /* eslint-disable prefer-rest-params */
            var args = Array.prototype.slice.call(arguments).concat(rowIndex);
            return func2.apply(this, args);
          }
          return v;
        }.bind(_this2);

        fieldProps = _this2.props.form.getFieldProps('addable-' + cfg.name + '-' + rowId, fieldProps);
      } else {
        fieldProps.value = value[rowIndex][cfg.name];
        fieldProps.onChange = function (e) {
          value[rowIndex][cfg.name] = (0, _utils.getValueFromEvent)(e);
          _this2.props.onChange(value);
          _this2.setState({ value: value });
        };
      }

      return _react2["default"].createElement(
        'div',
        { key: cfgIndex },
        cfg.render(rowIndex, fieldProps)
      );
    });
  },


  // 支持拖动方法
  onDragging: function onDragging(dragIndex, hoverIndex) {
    var _state3 = this.state,
        keys = _state3.keys,
        value = _state3.value;

    var dragItem = keys[dragIndex];
    var dragValue = value[dragIndex];
    keys.splice(dragIndex, 1);
    keys.splice(hoverIndex, 0, dragItem);
    value.splice(dragIndex, 1);
    value.splice(hoverIndex, 0, dragValue);
    this.setState({ keys: keys, value: value });
  },


  // 支持拖动方法
  onDragEnd: function onDragEnd() {
    this.props.onChange(this.state.value);
  }
};
module.exports = exports['default'];