'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = undefined;

var _dec, _dec2, _class, _class2, _temp; // eslint-disable-line new-cap


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDnd = require('react-dnd');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var ItemTypes = {
  OPTION: 'option'
};

var optionSource = {
  beginDrag: function beginDrag(props) {
    return {
      index: props.index
    };
  }
};

var optionTarget = {
  hover: function hover(props, monitor, component) {
    var dragIndex = monitor.getItem().index;
    var hoverIndex = props.index;

    if (dragIndex === hoverIndex) {
      return;
    }
    // Determine rectangle on screen
    var hoverBoundingRect = (0, _reactDom.findDOMNode)(component).getBoundingClientRect(); // eslint-disable-line react/no-find-dom-node

    // Get vertical middle
    var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

    // Determine mouse position
    var clientOffset = monitor.getClientOffset();

    // Get pixels to the top
    var hoverClientY = clientOffset.y - hoverBoundingRect.top;
    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
      return;
    }

    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
      return;
    }

    props.onDragging(dragIndex, hoverIndex);

    monitor.getItem().index = hoverIndex;
  },
  drop: function drop(props) {
    if (props.onDragEnd) {
      props.onDragEnd();
    }
  }
};

var DndItem = (_dec = (0, _reactDnd.DropTarget)(ItemTypes.OPTION, optionTarget, function (connect) {
  return { // eslint-disable-line new-cap
    connectDropTarget: connect.dropTarget()
  };
}), _dec2 = (0, _reactDnd.DragSource)(ItemTypes.OPTION, optionSource, function (connect, monitor) {
  return { // eslint-disable-line new-cap
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging()
  };
}), _dec(_class = _dec2(_class = (_temp = _class2 = function (_Component) {
  _inherits(DndItem, _Component);

  function DndItem() {
    _classCallCheck(this, DndItem);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  DndItem.prototype.render = function render() {
    var _props = this.props,
        isDragging = _props.isDragging,
        connectDragSource = _props.connectDragSource,
        connectDropTarget = _props.connectDropTarget,
        onRemove = _props.onRemove,
        elements = _props.elements,
        rowId = _props.rowId,
        keys = _props.keys;


    var rowCls = (0, _classnames2["default"])({
      'hrui-add-panel-block': true,
      'dnd-item': true,
      dragging: isDragging
    });

    var content = _react2["default"].createElement(
      'div',
      { className: rowCls, key: rowId },
      elements,
      keys.length > 1 ? _react2["default"].createElement(
        'div',
        { className: 'hrui-add-panel-btngroup' },
        _react2["default"].createElement(
          'a',
          { className: 'hrui-add-panel-dlbtn', onClick: onRemove },
          '\u5220\u9664'
        )
      ) : null
    );

    return connectDragSource(connectDropTarget(content));
  };

  return DndItem;
}(_react.Component), _class2.propTypes = {
  connectDragSource: _propTypes2["default"].func.isRequired,
  connectDropTarget: _propTypes2["default"].func.isRequired,
  onDragging: _propTypes2["default"].func.isRequired,
  onDragEnd: _propTypes2["default"].func.isRequired
}, _temp)) || _class) || _class);
exports["default"] = DndItem;
module.exports = exports['default'];