'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

require('antd/lib/row/style/css');

require('antd/lib/col/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _reactList = require('react-list');

var _reactList2 = _interopRequireDefault(_reactList);

var _treeNode = require('./tree-node');

var _treeNode2 = _interopRequireDefault(_treeNode);

var _nodeModel = require('./node-model');

var _nodeModel2 = _interopRequireDefault(_nodeModel);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SyncTree = function (_Component) {
  (0, _inherits3.default)(SyncTree, _Component);

  function SyncTree() {
    (0, _classCallCheck3.default)(this, SyncTree);
    return (0, _possibleConstructorReturn3.default)(this, (SyncTree.__proto__ || (0, _getPrototypeOf2.default)(SyncTree)).apply(this, arguments));
  }

  (0, _createClass3.default)(SyncTree, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.reset();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var search = props.search,
          searchValue = props.searchValue,
          treeData = props.treeData;

      if (treeData !== this.props.treeData) {
        this.reset(props);
      } else {
        var model = this.state.model;

        if (!searchValue) {
          this.setState({
            searching: false,
            searchValue: null,
            searchModel: null,
            searchExpandKey: []
          });
        } else if (this.props.searchValue !== searchValue) {
          var searchModel = model.search(function (node) {
            return search.call(model, searchValue, node);
          });
          var searchExpandKey = searchModel ? searchModel.getExpandKeyByLevel(Infinity) : [];
          this.setState({
            searchModel: searchModel,
            searching: true,
            searchExpandKey: searchExpandKey
          });
        }
      }
    }
  }, {
    key: 'onCheck',
    value: function onCheck(id, isRight) {
      var onChange = this.props.onChange;
      var _state = this.state,
          model = _state.model,
          searching = _state.searching,
          searchModel = _state.searchModel;

      if (searching && searchModel) {
        var node = searchModel.get(id);
        if (isRight) {
          model.get(id).uncheck();
        } else if (node) {
          node.toggleCheck();
          model.merge(searchModel);
        }
        // if (node) {
        //   if (isRight) {
        //     model.get(id).uncheck();
        //     node.uncheck();
        //   } else {

        //   }

        // }
      } else {
        var _node = model.get(id);
        if (_node) {
          if (isRight) {
            _node.uncheck();
          } else {
            _node.toggleCheck();
          }
        }
      }
      var checked = model.checked();
      var checkedIds = checked.map(function (node) {
        return node.id;
      });
      (onChange || _lodash.noop)(checkedIds, model);
      this.setState({
        rightModel: model.checkedTree()
      });
    }
  }, {
    key: 'onExpand',
    value: function onExpand(id, isRight) {
      var _state2 = this.state,
          searchExpandKey = _state2.searchExpandKey,
          leftExpandKey = _state2.leftExpandKey,
          rightExpandKey = _state2.rightExpandKey,
          searching = _state2.searching;

      if (isRight) {
        this.setState({
          rightExpandKey: (0, _utils.toggle)(rightExpandKey, id)
        });
      } else if (searching) {
        this.setState({
          searchExpandKey: (0, _utils.toggle)(searchExpandKey, id)
        });
      } else {
        this.setState({
          leftExpandKey: (0, _utils.toggle)(leftExpandKey, id)
        });
      }
    }
  }, {
    key: 'getNode',
    value: function getNode(node, isRight) {
      var _nodeText = this.props.nodeText;
      var _state3 = this.state,
          leftExpandKey = _state3.leftExpandKey,
          rightExpandKey = _state3.rightExpandKey,
          searchExpandKey = _state3.searchExpandKey,
          model = _state3.model,
          searching = _state3.searching;

      var id = node.id;
      var onCheck = this.onCheck.bind(this, id, isRight);
      var onExpand = this.onExpand.bind(this, id, isRight);
      var nodeText = function nodeText(item) {
        return _nodeText.call(model, item, isRight);
      };
      var expand = void 0;
      if (isRight) {
        expand = (0, _lodash.includes)(rightExpandKey, id);
      } else if (searching) {
        expand = (0, _lodash.includes)(searchExpandKey, id);
      } else {
        expand = (0, _lodash.includes)(leftExpandKey, id);
      }
      return _react2.default.createElement(_treeNode2.default, (0, _extends3.default)({ key: node.id }, { node: node, nodeText: nodeText, expand: expand, onCheck: onCheck, onExpand: onExpand }));
    }
  }, {
    key: 'getRenderInfo',
    value: function getRenderInfo(isRight) {
      var _state4 = this.state,
          model = _state4.model,
          searching = _state4.searching,
          searchModel = _state4.searchModel,
          rightModel = _state4.rightModel,
          searchExpandKey = _state4.searchExpandKey,
          leftExpandKey = _state4.leftExpandKey,
          rightExpandKey = _state4.rightExpandKey;

      var tree = void 0;
      var expandIds = void 0;
      if (isRight) {
        tree = rightModel;
        expandIds = rightExpandKey;
      } else if (searching) {
        tree = searchModel;
        expandIds = searchExpandKey;
      } else {
        tree = model;
        expandIds = leftExpandKey;
      }
      return { tree: tree, expandIds: expandIds };
    }
  }, {
    key: 'getTreeItem',
    value: function getTreeItem(isRight, index) {
      var _getRenderInfo = this.getRenderInfo(isRight),
          tree = _getRenderInfo.tree,
          expandIds = _getRenderInfo.expandIds;

      var rtn = false;
      if (tree) {
        var node = tree.getNodeByIndex(expandIds, index);
        rtn = this.getNode(node, isRight);
      }
      return rtn;
    }
  }, {
    key: 'getContent',
    value: function getContent(isRight) {
      var _getRenderInfo2 = this.getRenderInfo(isRight),
          tree = _getRenderInfo2.tree,
          expandIds = _getRenderInfo2.expandIds;

      var rtn = false;
      if (tree) {
        rtn = _react2.default.createElement(_reactList2.default, {
          itemRenderer: this.getTreeItem.bind(this, isRight),
          length: tree.getVisibleLength(expandIds),
          type: 'uniform'
        });
      }
      return rtn;
    }
  }, {
    key: 'reset',
    value: function reset() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var treeData = props.treeData,
          checked = props.checked,
          disabled = props.disabled,
          search = props.search,
          searchValue = props.searchValue;

      var data = { id: '#', name: 'ROOT', children: treeData };
      var model = new _nodeModel2.default(data);
      var leftExpandKey = model.getExpandKeyByLevel(this.props.defaultExpandLevel);
      var rightExpandKey = [].concat((0, _toConsumableArray3.default)(leftExpandKey));
      var searchExpandKey = [].concat((0, _toConsumableArray3.default)(leftExpandKey));
      var searchModel = void 0;
      var rightModel = void 0;
      if (checked) {
        checked.forEach(function (id) {
          var node = model.get(id);
          if (!node.isLeaf()) {
            console.warn('node which id is ' + id + ' not a leaf node');
          }
          if (node) {
            node.check();
          } else {
            console.warn('cannot find node which id is ' + id);
          }
        });
      }
      if (disabled) {
        disabled.forEach(function (id) {
          var node = model.get(id);
          if (node) {
            node.disable();
          } else {
            console.warn('cannot find node which id is ' + id);
          }
        });
      }
      if (searchValue) {
        searchModel = model.search(function (node) {
          return search.call(model, searchValue, node);
        });
        rightModel = searchModel.checkedTree();
      } else {
        rightModel = model.checkedTree();
      }
      this.setState({
        model: model,
        searchModel: searchModel,
        rightModel: rightModel,
        searching: !!searchValue,
        leftExpandKey: leftExpandKey,
        rightExpandKey: rightExpandKey,
        searchExpandKey: searchExpandKey
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state5 = this.state,
          model = _state5.model,
          searchModel = _state5.searchModel,
          searching = _state5.searching;

      var tree = searching ? searchModel : model;
      var _props = this.props,
          notFoundContent = _props.notFoundContent,
          onlyLeft = _props.onlyLeft,
          showCheckAll = _props.showCheckAll;

      var rootLeafCount = tree ? tree.leafs().length : 0;
      var left = _react2.default.createElement(
        'div',
        { className: 'hermes-tree-select-container' },
        _react2.default.createElement(
          'div',
          { className: 'header' },
          rootLeafCount && showCheckAll ? _react2.default.createElement(_treeNode2.default, { node: tree, onCheck: this.onCheck.bind(this, '#', false), nodeText: function nodeText() {
              return false;
            } }) : false,
          this.props.nodeText.call(tree, tree)
        ),
        _react2.default.createElement(
          'div',
          { className: 'content' },
          rootLeafCount > 0 ? this.getContent() : notFoundContent()
        )
      );
      return onlyLeft ? left : _react2.default.createElement(
        _row2.default,
        { gutter: 16 },
        _react2.default.createElement(
          _col2.default,
          { span: '12' },
          left
        ),
        _react2.default.createElement(
          _col2.default,
          { span: '12' },
          _react2.default.createElement(
            'div',
            { className: 'hermes-tree-select-container' },
            _react2.default.createElement(
              'div',
              { className: 'header' },
              this.props.nodeText.call(model, model, true)
            ),
            _react2.default.createElement(
              'div',
              { className: 'content' },
              this.getContent(true)
            )
          )
        )
      );
    }
  }]);
  return SyncTree;
}(_react.Component);

SyncTree.propTypes = {
  treeData: _react.PropTypes.array.isRequired,
  checked: _react.PropTypes.array,
  disabled: _react.PropTypes.array,
  onChange: _react.PropTypes.func,
  nodeText: _react.PropTypes.func,
  search: _react.PropTypes.func,
  searchValue: _react.PropTypes.any,
  defaultExpandLevel: _react.PropTypes.number,
  onlyLeft: _react.PropTypes.bool
};
SyncTree.defaultProps = {
  onChange: _lodash.noop,
  showCheckAll: true,
  onlyLeft: false,
  notFoundContent: _utils.DEFAULT_NO_FOUND_CONTENT,
  nodeText: _utils.DEFAULT_SYNC_NODE_TEXT,
  defaultExpandLevel: 0,
  treeData: []
};
exports.default = SyncTree;