'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _row = require('antd/lib/row');

var _row2 = _interopRequireDefault(_row);

var _col = require('antd/lib/col');

var _col2 = _interopRequireDefault(_col);

var _spin = require('antd/lib/spin');

var _spin2 = _interopRequireDefault(_spin);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

require('antd/lib/row/style/css');

require('antd/lib/col/style/css');

require('antd/lib/spin/style/css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _reactList = require('react-list');

var _reactList2 = _interopRequireDefault(_reactList);

var _treeNode = require('./tree-node');

var _treeNode2 = _interopRequireDefault(_treeNode);

var _nodeModel = require('./node-model');

var _nodeModel2 = _interopRequireDefault(_nodeModel);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AsyncTree = function (_Component) {
  (0, _inherits3.default)(AsyncTree, _Component);

  function AsyncTree() {
    (0, _classCallCheck3.default)(this, AsyncTree);
    return (0, _possibleConstructorReturn3.default)(this, (AsyncTree.__proto__ || (0, _getPrototypeOf2.default)(AsyncTree)).apply(this, arguments));
  }

  (0, _createClass3.default)(AsyncTree, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.reset();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var _this2 = this;

      var model = this.state.model;
      var searchValue = props.searchValue,
          _fetch = props.fetch;

      if (this.props.searchValue !== searchValue) {
        if (searchValue) {
          this.setState({
            loading: true
          });
          var searchModel = new _nodeModel2.default((0, _extends3.default)({}, _utils.DEFAULT_ROOT), {
            fetch: function fetch(node) {
              return _fetch(node, searchValue);
            },
            async: true
          });
          searchModel.fetch().then(function () {
            searchModel.correctDegree();
            if (searchModel.degree() === 0) {
              searchModel = null;
            } else {
              searchModel.merge(model);
              model.merge(searchModel, true);
            }
            _this2.setState({
              searchModel: searchModel,
              searchExpandKey: ['#'],
              loading: false,
              searching: true
            });
          });
        } else {
          this.setState({
            searchModel: null,
            loading: false,
            searching: false
          });
        }
      }
    }
  }, {
    key: 'onCheck',
    value: function onCheck(id, isRight) {
      var _this3 = this;

      var onChange = this.props.onChange;

      var handler = function handler(model) {
        var checked = model.checked();
        var checkedIds = checked.map(function (item) {
          return item.id;
        });
        (onChange || _lodash.noop)(checkedIds, model);
      };
      var _state = this.state,
          model = _state.model,
          searchModel = _state.searchModel,
          searching = _state.searching;

      if (isRight) {
        var node = model.get(id);
        if (node) {
          node.uncheck();
        }
        if (searching) {
          if (searchModel) {
            var n = searchModel.get(id);
            if (n) {
              n.uncheck();
            }
          }
        }
        this.setState({
          rightModel: model.checkedTree()
        });
        handler(model);
      } else if (!searching) {
        var _node = model.get(id);
        if (_node) {
          if (_node.needFetch(true)) {
            this.setState({
              loading: true
            });
          }
          _node.fetch(true).then(function () {
            _node.toggleCheck();
            _this3.setState({
              loading: false,
              rightModel: model.checkedTree()
            });
            handler(model);
          });
        }
      } else {
        var _node2 = searchModel.get(id);
        if (_node2) {
          if (_node2.needFetch(true)) {
            this.setState({
              loading: true
            });
          }
          _node2.fetch(true).then(function () {
            _node2.toggleCheck();
            model.get(id).merge(_node2, true);
            _this3.setState({
              loading: false,
              rightModel: model.checkedTree()
            });
            handler(model);
          });
        }
      }
    }
  }, {
    key: 'onExpand',
    value: function onExpand(id, isRight) {
      var _this4 = this;

      var _state2 = this.state,
          model = _state2.model,
          searching = _state2.searching,
          searchModel = _state2.searchModel,
          searchExpandKey = _state2.searchExpandKey,
          leftExpandKey = _state2.leftExpandKey,
          rightExpandKey = _state2.rightExpandKey;

      if (isRight) {
        this.setState({
          rightExpandKey: (0, _utils.toggle)(rightExpandKey, id)
        });
      } else if (searching) {
        var node = searchModel.get(id);
        if (node) {
          if (node.needFetch(true)) {
            this.setState({
              loading: true
            });
          }
          node.fetch().then(function () {
            searchModel.merge(model);
            model.get(id).merge(node, true);
            _this4.setState({
              searchExpandKey: (0, _utils.toggle)(searchExpandKey, id),
              loading: false
            });
          });
        }
      } else {
        var _node3 = model.get(id);
        if (_node3) {
          if (_node3.needFetch(true)) {
            this.setState({
              loading: true
            });
          }
          _node3.fetch().then(function () {
            _this4.setState({
              leftExpandKey: (0, _utils.toggle)(leftExpandKey, id),
              loading: false
            });
          });
        }
      }
    }
  }, {
    key: 'getNode',
    value: function getNode(node, isRight) {
      var _nodeText = this.props.nodeText;
      var _state3 = this.state,
          leftExpandKey = _state3.leftExpandKey,
          rightExpandKey = _state3.rightExpandKey,
          searchExpandKey = _state3.searchExpandKey,
          model = _state3.model,
          searching = _state3.searching;

      var id = node.id;
      var onCheck = this.onCheck.bind(this, id, isRight);
      var onExpand = this.onExpand.bind(this, id, isRight);
      var nodeText = function nodeText(item) {
        return _nodeText.call(model, item, isRight);
      };
      var expand = void 0;
      if (isRight) {
        expand = (0, _lodash.includes)(rightExpandKey, id);
      } else if (searching) {
        expand = (0, _lodash.includes)(searchExpandKey, id);
      } else {
        expand = (0, _lodash.includes)(leftExpandKey, id);
      }
      return _react2.default.createElement(_treeNode2.default, (0, _extends3.default)({ key: node.id }, { node: node, nodeText: nodeText, expand: expand, onCheck: onCheck, onExpand: onExpand }));
    }
  }, {
    key: 'getRenderInfo',
    value: function getRenderInfo(isRight) {
      var _state4 = this.state,
          model = _state4.model,
          searching = _state4.searching,
          searchModel = _state4.searchModel,
          rightModel = _state4.rightModel,
          searchExpandKey = _state4.searchExpandKey,
          leftExpandKey = _state4.leftExpandKey,
          rightExpandKey = _state4.rightExpandKey;

      var tree = void 0;
      var expandIds = void 0;
      if (isRight) {
        tree = rightModel;
        expandIds = rightExpandKey;
      } else if (searching) {
        tree = searchModel;
        expandIds = searchExpandKey;
      } else {
        tree = model;
        expandIds = leftExpandKey;
      }
      return { tree: tree, expandIds: expandIds };
    }
  }, {
    key: 'getTreeItem',
    value: function getTreeItem(isRight, index) {
      var _getRenderInfo = this.getRenderInfo(isRight),
          tree = _getRenderInfo.tree,
          expandIds = _getRenderInfo.expandIds;

      var rtn = false;
      if (tree) {
        var node = tree.getNodeByIndex(expandIds, index);
        rtn = this.getNode(node, isRight);
      }
      return rtn;
    }
  }, {
    key: 'getContent',
    value: function getContent(isRight) {
      var _getRenderInfo2 = this.getRenderInfo(isRight),
          tree = _getRenderInfo2.tree,
          expandIds = _getRenderInfo2.expandIds;

      var rtn = false;
      if (tree) {
        rtn = _react2.default.createElement(_reactList2.default, {
          itemRenderer: this.getTreeItem.bind(this, isRight),
          length: tree.getVisibleLength(expandIds),
          type: 'uniform'
        });
      }
      return rtn;
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _this5 = this;

      var _props = this.props,
          treeData = _props.treeData,
          checked = _props.checked,
          disabled = _props.disabled,
          _fetch2 = _props.fetch,
          searchValue = _props.searchValue;

      var model = new _nodeModel2.default((0, _extends3.default)({}, _utils.DEFAULT_ROOT, { children: treeData }), { fetch: _fetch2, async: true });
      if (checked) {
        checked.forEach(function (id) {
          model.get(id).check();
        });
      }
      if (disabled) {
        disabled.forEach(function (id) {
          model.get(id).disable();
        });
      }
      var searchModel = null;
      var rightModel = void 0;
      this.setState({
        loading: true,
        model: model,
        leftExpandKey: [],
        rightExpandKey: [],
        searchExpandKey: []
      });
      var ps = [];
      ps.push(model.fetch());
      if (searchValue) {
        searchModel = new _nodeModel2.default((0, _extends3.default)({}, _utils.DEFAULT_ROOT), {
          fetch: function fetch(node) {
            return _fetch2(node, searchValue);
          },

          async: true
        });
        ps.push(searchModel.fetch());
      }
      _promise2.default.all(ps).then(function () {
        model.correctDegree();
        if (searchModel) {
          searchModel.correctDegree();
          if (searchModel.degree() === 0) {
            searchModel = null;
          } else {
            searchModel.merge(model);
            model.merge(searchModel, true);
          }
        }
        rightModel = model.checkedTree();
        _this5.setState({
          model: model,
          rightModel: rightModel,
          searchModel: searchModel,
          loading: false,
          searching: !!searchValue
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state5 = this.state,
          model = _state5.model,
          searchModel = _state5.searchModel,
          searching = _state5.searching,
          loading = _state5.loading;

      var tree = searching ? searchModel : model;
      var _props2 = this.props,
          notFoundContent = _props2.notFoundContent,
          onlyLeft = _props2.onlyLeft,
          showCheckAll = _props2.showCheckAll;

      var rootDegree = tree ? tree.degree() : 0;
      var left = _react2.default.createElement(
        'div',
        { className: 'hermes-tree-select-container' },
        _react2.default.createElement(
          'div',
          { className: 'header' },
          rootDegree && showCheckAll ? _react2.default.createElement(_treeNode2.default, { node: tree, onCheck: this.onCheck.bind(this, '#', false), nodeText: function nodeText() {
              return undefined;
            } }) : false,
          this.props.nodeText.call(tree, tree)
        ),
        _react2.default.createElement(
          'div',
          { className: 'content' },
          _react2.default.createElement(
            _spin2.default,
            { spinning: loading },
            tree ? this.getContent() : notFoundContent()
          )
        )
      );
      return onlyLeft ? left : _react2.default.createElement(
        _row2.default,
        { gutter: 16 },
        _react2.default.createElement(
          _col2.default,
          { span: '12' },
          left
        ),
        _react2.default.createElement(
          _col2.default,
          { span: '12' },
          _react2.default.createElement(
            'div',
            { className: 'hermes-tree-select-container' },
            _react2.default.createElement(
              'div',
              { className: 'header' },
              this.props.nodeText.call(model, model, true)
            ),
            _react2.default.createElement(
              'div',
              { className: 'content' },
              this.getContent(true)
            )
          )
        )
      );
    }
  }]);
  return AsyncTree;
}(_react.Component);

AsyncTree.propTypes = {
  treeData: _react.PropTypes.array,
  checked: _react.PropTypes.array,
  disabled: _react.PropTypes.array,
  onChange: _react.PropTypes.func,
  fetch: _react.PropTypes.func,
  nodeText: _react.PropTypes.func,
  searchValue: _react.PropTypes.any,
  showCheckAll: _react.PropTypes.bool,
  onlyLeft: _react.PropTypes.bool
};
AsyncTree.defaultProps = {
  onChange: _lodash.noop,
  showCheckAll: true,
  onlyLeft: false,
  nodeText: _utils.DEFAULT_ASYNC_NODE_TEXT,
  notFoundContent: _utils.DEFAULT_NO_FOUND_CONTENT,
  treeData: []
};
exports.default = AsyncTree;