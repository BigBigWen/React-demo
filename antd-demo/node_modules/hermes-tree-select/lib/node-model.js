'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _lodash = require('lodash');

var _deferred = require('./deferred');

var _deferred2 = _interopRequireDefault(_deferred);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_CONFIG = {
  childrenPropertyName: 'children',
  idPropertyName: 'id',
  degreePropertyName: 'count',
  async: false,
  fetch: function fetch() {
    return _promise2.default.resolve([]);
  }
};

var TRUE = 1;
var FALSE = 0;
var INDETERMINATE = -1;

var Node = function () {
  function Node(data, config) {
    var _this = this;

    (0, _classCallCheck3.default)(this, Node);

    this.config = (0, _extends3.default)({}, DEFAULT_CONFIG, config);
    if (!(0, _lodash.isObject)(data)) {
      throw new Error('data must be an object');
    }
    var _config = this.config,
        childrenPropertyName = _config.childrenPropertyName,
        idPropertyName = _config.idPropertyName,
        degreePropertyName = _config.degreePropertyName;

    this.model = data;
    var _model = this.model,
        checked = _model.checked,
        disabled = _model.disabled;

    var id = this.model[idPropertyName];
    var degree = this.model[degreePropertyName];
    this.id = id;
    this._children = [];
    this.database = (0, _defineProperty3.default)({}, id, this);
    this.state = {
      disableState: FALSE,
      checkState: FALSE,
      signState: FALSE,
      fetchedState: degree ? FALSE : TRUE
    };
    if (!id) {
      throw new Error(idPropertyName + ' is not existed');
    }
    var children = this.model[childrenPropertyName];
    if (children) {
      if (Array.isArray(children)) {
        children.forEach(function (item) {
          _this._addChild(item);
        });
      } else {
        throw new Error(childrenPropertyName + ' must be an array');
      }
    }
    if (checked) {
      this.check();
    }
    if (disabled) {
      this.disable();
    }
  }

  (0, _createClass3.default)(Node, [{
    key: '_addChild',
    value: function _addChild(data) {
      var _config2 = this.config,
          async = _config2.async,
          degreePropertyName = _config2.degreePropertyName;

      var child = new Node(data, this.config);
      child._parent = this;
      var i = (0, _lodash.findIndex)(this.children(), function (item) {
        return item.id === child.id;
      });
      if (i !== -1) {
        var node = this.children()[i];
        child.merge(node, true);
        this.children().splice(i, 1, child);
        console.warn('node which id is (' + child.id + ') has been existed was merged');
      } else {
        this.children().push(child);
      }
      if (async) {
        var count = this.model[degreePropertyName];
        if (this.children().length > count) {
          console.warn(this.id + '\'s children of length more than it\'s ' + degreePropertyName);
        }
      }
      // 更新每个父节点的database
      var childDatabase = child.database;
      var ancestors = child.ancestors();
      ancestors.forEach(function (node) {
        (0, _lodash.forIn)(childDatabase, function (n, id) {
          node.database[id] = n;
        });
      });
      return child;
    }
  }, {
    key: 'addChild',
    value: function addChild(data) {
      var childrenPropertyName = this.config.childrenPropertyName;

      this.model[childrenPropertyName] = this.model[childrenPropertyName] || [];
      var node = this._addChild(data);
      var nodeModel = node.model;
      var modelChildren = this.model[childrenPropertyName];
      var i = (0, _lodash.findIndex)(modelChildren, function (item) {
        return item.id === node.id;
      });
      if (i !== -1) {
        modelChildren.splice(i, 1, nodeModel);
      } else {
        modelChildren.push(nodeModel);
      }
    }
  }, {
    key: 'get',
    value: function get(id) {
      return this.database[id];
    }
  }, {
    key: 'degree',
    value: function degree() {
      var _config3 = this.config,
          async = _config3.async,
          degreePropertyName = _config3.degreePropertyName;

      return !async ? this._children.length : this.model[degreePropertyName] || 0;
    }
  }, {
    key: 'depth',
    value: function depth() {
      return this.ancestors().length;
    }
  }, {
    key: 'isRoot',
    value: function isRoot() {
      return this._parent === undefined;
    }
  }, {
    key: 'isLeaf',
    value: function isLeaf() {
      return this.degree() === 0;
    }
  }, {
    key: 'children',
    value: function children() {
      return this._children;
    }
  }, {
    key: 'parent',
    value: function parent() {
      return this._parent;
    }
  }, {
    key: 'ancestors',
    value: function ancestors() {
      var rtn = [];
      var parent = this._parent;
      while (parent) {
        rtn.push(parent);
        parent = parent._parent;
      }
      return rtn;
    }
  }, {
    key: '_hasChild',
    value: function _hasChild(id) {
      var children = this.children();
      return (0, _lodash.find)(children, function (item) {
        return item.id === id;
      });
    }
  }, {
    key: 'needFetch',
    value: function needFetch(recursion) {
      var rtn = false;
      var async = this.config.async;

      if (async) {
        if (!recursion) {
          if (this.state.fetchedState === FALSE) {
            if (this.degree() > this.children().length) {
              rtn = true;
            } else {
              this._changeState('fetched', TRUE);
            }
          }
        } else {
          var list = [this.needFetch()];
          var children = this.children();
          children.forEach(function (item) {
            list.push(item.needFetch(true));
          });
          rtn = list.some(function (item) {
            return item === true;
          });
        }
      }
      return rtn;
    }
  }, {
    key: 'fetch',
    value: function fetch(recursion) {
      var _this2 = this;

      var fetch = this.config.fetch;

      var dfd = new _deferred2.default();
      var childrenFetch = function childrenFetch() {
        var children = _this2.children();
        var ps = [];
        children.forEach(function (item) {
          var p = item.fetch(true);
          ps.push(p);
        });
        _promise2.default.all(ps).then(function () {
          dfd.resolve(_this2);
        }, function (error) {
          console.error(error);
        });
      };
      if (!recursion) {
        if (this.needFetch()) {
          var promise = fetch(this);
          if (promise) {
            promise.then(function (children) {
              children.forEach(function (item) {
                _this2.addChild(item);
              });
              _this2._changeState('fetched', TRUE);
              dfd.resolve(_this2);
            }, function (error) {
              console.error('node which id is ' + _this2.id + ' fetch failed with error ' + error);
            });
          } else {
            this._changeState('fetched', TRUE);
            dfd.resolve(this);
          }
        } else {
          dfd.resolve(this);
        }
      } else if (this.needFetch(true)) {
        if (this.needFetch()) {
          this.fetch().then(function () {
            childrenFetch();
          }, function (error) {
            console.error(error);
          });
        } else {
          childrenFetch();
        }
      } else {
        dfd.resolve(this);
      }
      return dfd.promise;
    }
  }, {
    key: 'walkPreOrder',
    value: function walkPreOrder(action, context) {
      var length = this._children.length;
      var keepGoing = action.call(context, this);
      for (var i = 0; i < length; i++) {
        if (keepGoing === false) {
          return false;
        }
        keepGoing = this._children[i].walkPreOrder(action, context);
      }
      return keepGoing;
    }
  }, {
    key: 'walkPostOrder',
    value: function walkPostOrder(action, context) {
      var length = this._children.length;
      var keepGoing = void 0;
      for (var i = 0; i < length; i++) {
        keepGoing = this._children[i].walkPostOrder(action, context);
        if (keepGoing === false) {
          return false;
        }
      }
      keepGoing = action.call(context, this);
      return keepGoing;
    }
  }, {
    key: 'first',
    value: function first(filter, context) {
      var rtn = void 0;
      this.walkPostOrder(function (node) {
        var keepGoing = true;
        if (filter.call(context, node)) {
          rtn = node;
          keepGoing = false;
        }
        return keepGoing;
      });
      return rtn;
    }
  }, {
    key: 'all',
    value: function all(filter, context) {
      var rtn = [];
      this.walkPreOrder(function (node) {
        if (filter.call(context, node)) {
          rtn.push(node);
        }
      });
      return rtn;
    }

    // todo 中序算法

  }, {
    key: 'waklInOrder',
    value: function waklInOrder(action, context) {// eslint-disable-line
    }
  }, {
    key: 'search',
    value: function search(filter, context) {
      var list = [];
      var checked = this.checked();
      var disabled = this.disabled();
      var newTree = this.clone();
      checked.forEach(function (item) {
        newTree.get(item.id).check();
      });
      disabled.forEach(function (item) {
        newTree.get(item.id).disable();
      });
      if (newTree) {
        newTree.walkPreOrder(function (node) {
          if (filter.call(context, node)) {
            node._sign();
          }
        }, context);
        newTree.walkPreOrder(function (node) {
          if (node._signState() === FALSE) {
            list.push(node);
          }
        });
        if (list.indexOf(newTree) !== -1) {
          newTree = null;
        } else {
          list.forEach(function (item) {
            item.drop();
          });
        }
      }
      return newTree;
    }
  }, {
    key: 'leafs',
    value: function leafs() {
      var rtn = [];
      this.walkPostOrder(function (node) {
        if (node.isLeaf()) {
          rtn.push(node);
        }
      });
      return rtn;
    }
  }, {
    key: '_changeState',
    value: function _changeState(type, value) {
      this.state[type + 'State'] = value;
    }
  }, {
    key: '_sign',
    value: function _sign() {
      if (!this.isLeaf()) {
        this._children.forEach(function (item) {
          item._sign();
        });
      } else {
        this.state.signState = TRUE;
      }
      return this;
    }
  }, {
    key: '_signState',
    value: function _signState() {
      var rtn = FALSE;
      if (!this.isLeaf()) {
        var leafs = this.leafs();
        var allFalse = leafs.every(function (node) {
          return node.state.signState === FALSE;
        });
        var allTrue = leafs.every(function (node) {
          return node.state.signState === TRUE;
        });
        if (allTrue && leafs.length > 0) {
          rtn = TRUE;
        } else if (allFalse) {
          rtn = FALSE;
        } else {
          rtn = INDETERMINATE;
        }
      } else {
        rtn = this.state.signState;
      }
      return rtn;
    }
  }, {
    key: 'nextAction',
    value: function nextAction() {
      var rtn = 'CHECK';
      var leafs = this.leafs();
      var allChecked = leafs.every(function (node) {
        return node.checkState() === TRUE || node.disableState() === TRUE;
      });
      if (allChecked) {
        rtn = 'UNCHECK';
      }
      return rtn;
    }
  }, {
    key: 'toggleCheck',
    value: function toggleCheck() {
      var action = this.nextAction();
      if (action === 'CHECK') {
        this.check();
      } else if (action === 'UNCHECK') {
        this.uncheck();
      }
    }
  }, {
    key: 'check',
    value: function check() {
      if (!this.isLeaf()) {
        this._children.forEach(function (item) {
          item.check();
        });
        if (this.needFetch()) {
          console.warn('node which id is ' + this.id + ' needFetch!!, please fetch it first!');
        }
      } else if (this.disableState() === FALSE) {
        this._changeState('check', TRUE);
      }
      return this;
    }
  }, {
    key: 'uncheck',
    value: function uncheck() {
      if (!this.isLeaf()) {
        this._children.forEach(function (item) {
          item.uncheck();
        });
      } else if (this.disableState() === FALSE) {
        this._changeState('check', FALSE);
      }
      return this;
    }
  }, {
    key: 'checkState',
    value: function checkState() {
      var rtn = FALSE;
      var async = this.config.async;

      if (async && this.needFetch(true)) {
        var children = this.children();
        if (children.length === 0) {
          rtn = FALSE;
        } else {
          var hasTrue = children.some(function (node) {
            return node.checkState() === TRUE;
          });
          var allTrue = children.every(function (node) {
            return node.checkState() === TRUE;
          });
          if (children.length === this.degree() && allTrue) {
            rtn = TRUE;
          } else if (hasTrue) {
            rtn = INDETERMINATE;
          } else {
            rtn = FALSE;
          }
        }
      } else if (!this.isLeaf()) {
        var _children = this.children();
        var _allTrue = _children.every(function (node) {
          return node.checkState() === TRUE;
        });
        var allFalse = _children.every(function (node) {
          return node.checkState() === FALSE;
        });
        if (_allTrue) {
          rtn = TRUE;
        } else if (allFalse) {
          rtn = FALSE;
        } else {
          rtn = INDETERMINATE;
        }
      } else {
        rtn = this.state.checkState;
      }
      return rtn;
    }
  }, {
    key: 'disable',
    value: function disable() {
      if (!this.isLeaf()) {
        this._children.forEach(function (item) {
          item.disable();
        });
        if (this.needFetch()) {
          console.error('node which id is ' + this.id + ' needFetch!!, please fetch it first!');
        }
      } else {
        this._changeState('disable', TRUE);
      }
      return this;
    }
  }, {
    key: 'enable',
    value: function enable() {
      if (!this.isLeaf()) {
        this._children.forEach(function (item) {
          item.enable();
        });
      } else {
        this._changeState('disable', FALSE);
      }
      return this;
    }
  }, {
    key: 'disableState',
    value: function disableState() {
      var rtn = void 0;
      var async = this.config.async;

      if (async && this.needFetch(true)) {
        rtn = FALSE;
      } else if (!this.isLeaf()) {
        var children = this.children();
        var allTrue = children.every(function (node) {
          return node.disableState() === TRUE;
        });
        rtn = allTrue ? TRUE : FALSE;
      } else {
        rtn = this.state.disableState;
      }
      return rtn;
    }
  }, {
    key: 'drop',
    value: function drop() {
      if (!this.isRoot()) {
        var childrenPropertyName = this.config.childrenPropertyName;

        var index = this._parent._children.indexOf(this);
        this._parent._children.splice(index, 1);
        this._parent.model[childrenPropertyName].splice(index, 1);
        // 更新每个父节点的database
        var childDatabase = this.database;
        var ancestors = this.ancestors();
        ancestors.forEach(function (node) {
          (0, _lodash.forIn)(childDatabase, function (n) {
            delete node.database[n.id];
          });
        });
        this._parent = undefined;
        delete this._parent;
      }
      return this;
    }
  }, {
    key: 'clone',
    value: function clone() {
      var data = this.toJSON();
      var rtn = void 0;
      if (data) {
        rtn = new Node(data, this.config);
      }
      return rtn;
    }
  }, {
    key: 'checked',
    value: function checked() {
      var leafs = this.leafs();
      return leafs.filter(function (item) {
        return item.checkState() === TRUE;
      });
    }
  }, {
    key: 'checkedTree',
    value: function checkedTree() {
      return this.search(function (node) {
        return node.checkState() === TRUE;
      });
    }
  }, {
    key: 'disabled',
    value: function disabled() {
      var leafs = this.leafs();
      return leafs.filter(function (item) {
        return item.disableState() === TRUE;
      });
    }
  }, {
    key: 'merge',
    value: function merge(tree, all) {
      var _this3 = this;

      if (all) {
        if (tree.id !== this.id) {
          console.warn('can not merge, because of not same root');
        } else {
          var children = tree.children();
          children.forEach(function (item) {
            var node = _this3._hasChild(item.id);
            if (node) {
              node.merge(item, all);
            } else {
              _this3.addChild(item.model);
            }
          });
        }
      }
      var leafs = tree.leafs();
      leafs.forEach(function (item) {
        var node = _this3.get(item.id);
        if (node) {
          if (item.checkState() === TRUE) {
            node.check();
          } else {
            node.uncheck();
          }
          if (item.disableState() === TRUE) {
            node.disable();
          } else {
            node.enable();
          }
        }
      });
      return this;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var rtn = void 0;
      try {
        rtn = JSON.parse((0, _stringify2.default)(this.model));
      } catch (e) {
        throw new Error('tree\'s data must be an object which can be stringify');
      }
      return rtn;
    }
  }, {
    key: 'getExpandKeyByLevel',
    value: function getExpandKeyByLevel(level) {
      var list = this.all(function (node) {
        return node.depth() <= level;
      });
      return list.map(function (node) {
        return node.id;
      });
    }
  }, {
    key: 'correctDegree',
    value: function correctDegree() {
      var async = this.config.async;

      if (async) {
        var degreePropertyName = this.config.degreePropertyName;

        this.model[degreePropertyName] = this.children().length;
      }
      return this;
    }
  }, {
    key: 'getNodeByIndex',
    value: function getNodeByIndex(expandIds, index) {
      var children = this.children();
      var length = children.length;
      var rtn = void 0;
      var base = 0;
      for (var i = 0; i < length; i++) {
        var node = children[i];
        var id = node.id;
        if (base === index) {
          rtn = node;
          break;
        } else {
          base++;
          if (!node.isLeaf() && expandIds.indexOf(id) !== -1) {
            var vLength = node.getVisibleLength(expandIds);
            if (base + vLength > index) {
              rtn = node.getNodeByIndex(expandIds, index - base);
              break;
            } else {
              base += vLength;
            }
          }
        }
        if (rtn) {
          break;
        }
      }
      return rtn;
    }
  }, {
    key: 'getVisibleLength',
    value: function getVisibleLength(expandIds) {
      var children = this.children();
      var length = children.length;
      var rtn = 0;
      for (var i = 0; i < length; i++) {
        var node = children[i];
        var id = node.id;
        rtn++;
        if (!node.isLeaf() && expandIds.indexOf(id) !== -1) {
          rtn += node.getVisibleLength(expandIds);
        }
      }
      return rtn;
    }
  }]);
  return Node;
}();

(0, _lodash.assign)(Node, { TRUE: TRUE, FALSE: FALSE, INDETERMINATE: INDETERMINATE });

exports.default = Node;